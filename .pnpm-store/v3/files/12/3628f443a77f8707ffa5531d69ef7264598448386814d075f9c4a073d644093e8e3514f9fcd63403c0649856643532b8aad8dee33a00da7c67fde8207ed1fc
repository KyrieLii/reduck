function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export const formatServer = request => {
  const {
    cookie,
    'user-agent': userAgent,
    referer
  } = request.headers || {};
  return _objectSpread({
    cookie,
    userAgent,
    referer
  }, request);
};

const getQuery = () => window.location.search.substring(1).split('&').reduce((res, item) => {
  const [key, value] = item.split('=');
  res[key] = value;
  return res;
}, {});

export const formatClient = request => {
  return {
    params: request.params || {},
    host: request.host || location.host,
    pathname: request.pathname || location.pathname,
    headers: request.headers || {},
    cookieMap: request.cookieMap || {},
    cookie: request.headers.cookie || document.cookie,
    userAgent: request.headers['user-agent'] || navigator.userAgent,
    referer: request.referer || document.referrer,
    query: request.query || getQuery(),
    url: location.href
  };
};