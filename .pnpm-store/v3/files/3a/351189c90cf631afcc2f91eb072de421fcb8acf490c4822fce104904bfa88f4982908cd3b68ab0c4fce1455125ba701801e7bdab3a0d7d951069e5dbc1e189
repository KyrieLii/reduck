"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableRegister = void 0;

var _path = _interopRequireDefault(require("path"));

var _serverUtils = require("@modern-js/server-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const registerDirs = ['./api', './server', './config/mock', './shared'];

const enableRegister = (projectRoot, config) => {
  const TS_CONFIG_FILENAME = `tsconfig.json`;

  const tsconfigPath = _path.default.resolve(projectRoot, TS_CONFIG_FILENAME);

  const babelConfig = (0, _serverUtils.resolveBabelConfig)(projectRoot, config, {
    tsconfigPath,
    syntax: 'es6+',
    type: 'commonjs'
  });
  return require('@babel/register')(_objectSpread(_objectSpread({}, babelConfig), {}, {
    only: [function (filePath) {
      // TODO: wait params
      // FIXME: 删除hardcode，根据 AppContext 中的 metaName 设置路径
      if (filePath.includes(`node_modules${_path.default.sep}.modern-js`)) {
        return true;
      }

      return registerDirs.some(registerDir => filePath.startsWith(_path.default.join(projectRoot, registerDir)));
    }],
    extensions: ['.js', '.ts'],
    babelrc: false,
    configFile: false,
    root: projectRoot
  }));
};

exports.enableRegister = enableRegister;