import React from 'react';
import { Plugin } from './plugin';
export declare type WrapOptions = Record<string, unknown>;
export declare const initialWrapper: (plugins: Plugin[], manager?: import("@modern-js/plugin").Manager<{
  hoc: import("@modern-js/plugin").Pipeline<{
    App: React.ComponentType<any>;
  }, React.ComponentType<any>>;
  provide: import("@modern-js/plugin").Pipeline<{
    element: JSX.Element;
    readonly props: import("./plugin").AppProps;
    readonly context: import("./runtime-context").RuntimeContext;
  }, JSX.Element>;
  client: import("@modern-js/plugin").AsyncPipeline<{
    App: React.ComponentType<any>;
    readonly context?: import("./runtime-context").RuntimeContext | undefined;
    rootElement: HTMLElement;
  }, void>;
  server: import("@modern-js/plugin").AsyncPipeline<{
    App: React.ComponentType<any>;
    readonly context?: import("./runtime-context").RuntimeContext | undefined;
  }, string>;
  init: import("@modern-js/plugin").AsyncPipeline<{
    context: import("./runtime-context").RuntimeContext;
  }, unknown>;
  pickContext: import("@modern-js/plugin").Pipeline<{
    context: import("./runtime-context").RuntimeContext;
    pickedContext: import("./runtime-context").TRuntimeContext;
  }, import("./runtime-context").TRuntimeContext>;
}, Record<string, never>>) => <P = Record<string, unknown>>(App: React.ComponentType<P>, config: WrapOptions) => React.ComponentType<any>;
export declare const wrap: <P = Record<string, unknown>>(App: React.ComponentType<P>, {}: WrapOptions, manager?: import("@modern-js/plugin").Manager<{
  hoc: import("@modern-js/plugin").Pipeline<{
    App: React.ComponentType<any>;
  }, React.ComponentType<any>>;
  provide: import("@modern-js/plugin").Pipeline<{
    element: JSX.Element;
    readonly props: import("./plugin").AppProps;
    readonly context: import("./runtime-context").RuntimeContext;
  }, JSX.Element>;
  client: import("@modern-js/plugin").AsyncPipeline<{
    App: React.ComponentType<any>;
    readonly context?: import("./runtime-context").RuntimeContext | undefined;
    rootElement: HTMLElement;
  }, void>;
  server: import("@modern-js/plugin").AsyncPipeline<{
    App: React.ComponentType<any>;
    readonly context?: import("./runtime-context").RuntimeContext | undefined;
  }, string>;
  init: import("@modern-js/plugin").AsyncPipeline<{
    context: import("./runtime-context").RuntimeContext;
  }, unknown>;
  pickContext: import("@modern-js/plugin").Pipeline<{
    context: import("./runtime-context").RuntimeContext;
    pickedContext: import("./runtime-context").TRuntimeContext;
  }, import("./runtime-context").TRuntimeContext>;
}, Record<string, never>>) => React.ComponentType<any>;