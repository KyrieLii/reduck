/**
 * modified from https://github.com/farrow-js/farrow/tree/master/packages/farrow-pipeline
 * license at https://github.com/farrow-js/farrow/blob/master/LICENSE
 */
import { asyncHooks } from "./asyncHooksInterface";
export const createHooks = defaultHooks => {
  let currentHooks = {};
  const hooks = {};

  for (const key in defaultHooks) {
    // eslint-disable-next-line @typescript-eslint/no-loop-func
    const f = (...args) => {
      var _asyncHooks$get;

      const hooks = currentHooks === defaultHooks ? (_asyncHooks$get = asyncHooks === null || asyncHooks === void 0 ? void 0 : asyncHooks.get()) !== null && _asyncHooks$get !== void 0 ? _asyncHooks$get : defaultHooks : currentHooks;
      let handler = hooks[key];

      if (typeof handler !== 'function') {
        handler = defaultHooks[key];
      }

      return handler(...args);
    };

    hooks[key] = f;
  }

  const run = (f, implementations) => {
    try {
      currentHooks = implementations || defaultHooks;
      asyncHooks === null || asyncHooks === void 0 ? void 0 : asyncHooks.set(currentHooks);
      return f();
    } finally {
      currentHooks = defaultHooks;
    }
  };

  return {
    run,
    hooks
  };
};