"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.syncGetProjects = exports.getProjects = void 0;

var _error = require("../log/error");

var _monorepo = require("../parse-config/monorepo");

var _getProjectsByPackagesConfig = require("./get-projects-by-packages-config");

var _getProjectsByWorkspaceFile = require("./get-projects-by-workspace-file");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FindProjectsMode;

(function (FindProjectsMode) {
  FindProjectsMode[FindProjectsMode["Rough"] = 0] = "Rough";
  FindProjectsMode[FindProjectsMode["Precise"] = 1] = "Precise";
})(FindProjectsMode || (FindProjectsMode = {}));

const getProjectsByProjectsConfig = (rootPath, configs = []) => {
  const subProjects = [];

  for (const config of configs) {
    subProjects.push({
      name: config.name,
      extra: {
        path: config.path
      },
      // dagNodeEdge: 0,
      dependencyEdge: 0,
      dependentEdge: 0,
      checkedCircle: false,
      circlePath: []
    });
  }

  return subProjects;
};

const getProjectsByPackagesMatch = async (rootPath, match, ignore) => {
  let projects = [];

  if (Array.isArray(match)) {
    // like lerna`s packages config
    projects = await (0, _getProjectsByPackagesConfig.getProjectsByPackageConfig)(rootPath, match, ignore);
  } else {
    // use workspace file
    projects = await (0, _getProjectsByWorkspaceFile.getProjectsByWorkspaceFile)(rootPath, match, ignore);
  }

  const subProjects = [];

  for (const project of projects) {
    subProjects.push({
      name: project.name,
      extra: _objectSpread({
        path: project.path
      }, project.json),
      // dagNodeEdge: 0,
      dependencyEdge: 0,
      dependentEdge: 0,
      checkedCircle: false,
      circlePath: []
    });
  }

  return subProjects;
};

const syncGetProjectsByPackagesMatch = (rootPath, match, ignore) => {
  let projects = []; // TODO: code start

  if (Array.isArray(match)) {
    // like lerna`s packages config
    projects = (0, _getProjectsByPackagesConfig.syncGetProjectsByPackageConfig)(rootPath, match, ignore);
  } else {
    // use workspace file
    projects = (0, _getProjectsByWorkspaceFile.syncGetProjectsByWorkspaceFile)(rootPath, match, ignore);
  }

  const subProjects = [];

  for (const project of projects) {
    subProjects.push({
      name: project.name,
      extra: _objectSpread({
        path: project.path
      }, project.json),
      // dagNodeEdge: 0,
      dependencyEdge: 0,
      dependentEdge: 0,
      checkedCircle: false,
      circlePath: []
    });
  }

  return subProjects;
};

const checkFindProjectsMode = (config // eslint-disable-next-line consistent-return
) => {
  if (config.packagesMatchs && Array.isArray(config.packagesMatchs)) {
    return FindProjectsMode.Rough;
  }

  if (config.packagesMatchs && typeof config.packagesMatchs === 'object' && (config.packagesMatchs.workspaceFile || config.packagesMatchs.enableAutoFinder)) {
    return FindProjectsMode.Rough;
  }

  if (config.projectsConfig && Array.isArray(config.projectsConfig)) {
    return FindProjectsMode.Precise;
  }

  if (config.projectsConfig && config.packagesMatchs) {
    (0, _error.errorLog)('There can not be both `packagesMatchs` and `projectsConfig`');
  }

  (0, _error.errorLog)('No `packagesMatchs` and `projectsConfig` configurations found');
};

const getProjects = async (config, currentDir = process.cwd()) => {
  const {
    rootPath
  } = (0, _monorepo.getMonorepoBaseData)(currentDir);
  const mode = checkFindProjectsMode(config);
  let projects = [];

  if (mode === FindProjectsMode.Rough) {
    projects = await getProjectsByPackagesMatch(rootPath, config.packagesMatchs, config.packagesIgnoreMatchs || []);
  } else if (mode === FindProjectsMode.Precise) {
    projects = getProjectsByProjectsConfig(rootPath, config.projectsConfig);
  }

  return projects;
};

exports.getProjects = getProjects;

const syncGetProjects = (config, currentDir = process.cwd()) => {
  const {
    rootPath
  } = (0, _monorepo.getMonorepoBaseData)(currentDir);
  const mode = checkFindProjectsMode(config);
  let projects = [];

  if (mode === FindProjectsMode.Rough) {
    projects = syncGetProjectsByPackagesMatch(rootPath, config.packagesMatchs, config.packagesIgnoreMatchs || []);
  } else if (mode === FindProjectsMode.Precise) {
    projects = getProjectsByProjectsConfig(rootPath, config.projectsConfig);
  }

  return projects;
};

exports.syncGetProjects = syncGetProjects;