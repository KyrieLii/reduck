function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getBabelChain } from '@modern-js/babel-preset-lib';
import { getBuildInPlugins } from "./built-in";
export const getBabelConfig = (modulePresetOption, syntaxOption) => {
  const chain = getModuleBabelChain(modulePresetOption, syntaxOption);
  return _objectSpread({
    sourceType: 'unambiguous'
  }, chain.toJSON());
};
export const getModuleBabelChain = (modulePresetOption, syntaxOption) => {
  const {
    appDirectory
  } = modulePresetOption;
  const chain = getBabelChain(modulePresetOption, syntaxOption); // link: https://github.com/tc39/proposal-do-expressions

  chain.plugin('@babel/plugin-proposal-do-expressions').use(require.resolve('@babel/plugin-proposal-do-expressions')); // link: https://github.com/tc39/proposal-throw-expressions

  chain.plugin('@babel/plugin-proposal-throw-expressions').use(require.resolve('@babel/plugin-proposal-throw-expressions')); // https://github.com/tc39/proposal-class-static-block

  chain.plugin('@babel/plugin-proposal-class-static-block').use(require.resolve('@babel/plugin-proposal-class-static-block')); // link:
  // https://github.com/tc39/proposal-function.sent

  chain.plugin('@babel/plugin-proposal-function-sent').use(require.resolve('@babel/plugin-proposal-function-sent')); // link:
  // https://github.com/tc39/proposal-logical-assignment

  chain.plugin('@babel/plugin-proposal-logical-assignment-operators').use(require.resolve('@babel/plugin-proposal-logical-assignment-operators'));
  const buildInPlugins = getBuildInPlugins({
    appDirectory,
    importStyle: modulePresetOption.importStyle
  });
  chain.merge(buildInPlugins);
  return chain;
};
export const getFinalBabelConfig = chain => _objectSpread({
  sourceType: 'unambiguous'
}, chain.toJSON());
export * from "./types";
export { getBabelUtils } from '@modern-js/babel-preset-lib';