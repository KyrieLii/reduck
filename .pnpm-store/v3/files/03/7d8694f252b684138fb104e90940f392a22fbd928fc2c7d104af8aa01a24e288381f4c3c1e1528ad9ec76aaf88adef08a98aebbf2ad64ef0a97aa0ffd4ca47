import _merge from "lodash/merge";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { fs, execa, semver } from '@modern-js/utils';
import { parse, stringify } from 'comment-json';
import { NpmAPI, canUsePnpm, canUseYarn, canUseNpm } from '@modern-js/codesmith-api-npm';
import { GitAPI } from '@modern-js/codesmith-api-git';
import { HandlebarsAPI } from '@modern-js/codesmith-api-handlebars';
import { setInitValues, CliReader, setCliQuestionsHandlers } from '@modern-js/easy-form-cli';
import { transformSchema } from "./utils/transformSchema";
import * as handlers from "./handlers";
import { i18n, localeKeys } from "./locale";
export { transformSchema };
export { forEach } from '@modern-js/easy-form-cli';
setCliQuestionsHandlers(handlers);
export class AppAPI {
  constructor(generatorContext, generatorCore) {
    this.i18n = i18n;
    this.generatorCore = void 0;
    this.generatorContext = void 0;
    this.npmApi = void 0;
    this.gitApi = void 0;
    this.handlebarsAPI = void 0;
    this.generatorCore = generatorCore;
    this.generatorContext = generatorContext;
    this.npmApi = new NpmAPI(generatorCore);
    this.gitApi = new GitAPI(generatorCore, generatorContext);
    this.handlebarsAPI = new HandlebarsAPI(this.generatorCore);
  }

  async checkEnvironment() {
    if (semver.lt(process.versions.node, '12.17.0')) {
      this.generatorCore.logger.warn(i18n.t(localeKeys.environment.node_version));
      return false;
    }

    if (!(await canUseYarn()) && !(await canUsePnpm()) && !(await canUseNpm())) {
      this.generatorCore.logger.debug("can't use yarn or pnpm or npm");
      this.generatorCore.logger.warn(i18n.t(localeKeys.environment.yarn_pnpm_npm));
      return false;
    }

    return true;
  } // support custom install command


  async runInstall(command) {
    const {
      config: {
        packageManager,
        noNeedInstall
      }
    } = this.generatorContext;

    if (noNeedInstall || process.env.NoNeedInstall === 'true') {
      return;
    } // const spinner = ora('Install...').start();
    // spinner.color = 'yellow';
    // try {


    let intallPromise;

    if (command) {
      intallPromise = execa(command);
    } else if (packageManager === 'pnpm') {
      intallPromise = this.npmApi.pnpmInstall();
    } else if (packageManager === 'yarn') {
      intallPromise = this.npmApi.yarnInstall();
    } else {
      intallPromise = this.npmApi.npmInstall();
    }

    try {
      await intallPromise;
      this.generatorCore.logger.info(i18n.t(localeKeys.install.success));
    } catch (e) {
      this.generatorCore.logger.warn(i18n.t(localeKeys.install.failed, {
        command: command || `${packageManager} install`
      }));
    } // spinner.stop();
    // } catch (e) {
    //   // spinner.stop();
    //   throw e;
    // }

  } // custom install func


  async runGitAndInstall(commitMessage, installFunc) {
    const {
      config: {
        isMonorepoSubProject = false
      }
    } = this.generatorContext;
    const inGitRepo = isMonorepoSubProject || (await this.gitApi.isInGitRepo());

    if (!inGitRepo) {
      await this.gitApi.initGitRepo();
    }

    try {
      if (installFunc) {
        await installFunc();
      } else {
        await this.runInstall();
      }
    } catch (e) {
      this.generatorCore.logger.debug('Dependencies install failed', e);
      this.generatorCore.logger.warn(i18n.t(localeKeys.install.failed_no_command));
    }

    try {
      if (!isMonorepoSubProject) {
        await this.gitApi.addAndCommit(commitMessage || 'feat: init');
        this.generatorCore.logger.info(i18n.t(localeKeys.git.success));
      }
    } catch (e) {
      this.generatorCore.logger.debug('Git repository create failed', e);
      this.generatorCore.logger.warn(i18n.t(localeKeys.git.failed));
    }
  }

  async forgeTemplate(templatePattern, filter, rename, parameters) {
    try {
      const {
        material
      } = this.generatorContext.current;
      const resourceMap = await material.find(templatePattern, {
        nodir: true,
        dot: true
      });

      if (resourceMap) {
        await Promise.all(Object.keys(resourceMap).filter(resourceKey => filter ? filter(resourceKey) : true).map(async resourceKey => {
          this.generatorCore.logger.debug(`[renderDir] resourceKey=${resourceKey}`);
          const target = rename ? rename(resourceKey) : resourceKey.replace(`templates/`, '').replace('.handlebars', '');
          await this.handlebarsAPI.renderTemplate(material.get(resourceKey), target, _objectSpread(_objectSpread({}, this.generatorContext.data || {}), parameters || {}));
        }));
      }
    } catch (e) {
      this.generatorCore.logger.debug('base forging failed:', e);
      this.generatorCore.logger.warn(i18n.t(localeKeys.templated.failed));
      throw new Error('base forging failed');
    }
  }

  async updateWorkspace(folder, workspaceName = 'monorepo.code-workspace') {
    const {
      filePath
    } = this.generatorContext.materials.default.get(workspaceName);

    if (!fs.existsSync(filePath)) {
      return;
    }

    const content = await fs.readFile(filePath);
    const workspace = parse(content.toString());
    workspace.folders = [folder, ...(workspace.folders || [])];
    const indent = 2;
    await fs.writeFile(filePath, stringify(workspace, null, indent), {
      encoding: 'utf-8'
    });
  }

  showSuccessInfo(successInfo) {
    this.generatorCore.logger.info(successInfo || i18n.t(localeKeys.success.info));
  }

  async runSubGenerator(subGenerator, relativePwdPath, config) {
    try {
      await this.generatorCore.runSubGenerator(subGenerator, relativePwdPath, config);
    } catch (e) {
      this.generatorCore.logger.warn(i18n.t(localeKeys.generator.failed));
      this.generatorCore.logger.debug(i18n.t(localeKeys.generator.failed), e);
      throw new Error('run sub generator failed');
    }
  }
  /**
   * questions input
   * @param schema Questions schema
   * @param configValue Default config. When the question's key is in configValue, it will not show.
   * @param validateMap Question validate function map
   * @param initValue Initial value. Even the question's key is in initValue, it alse show in question list.
   * @returns
   */


  async getInputBySchema(schema, configValue = {}, validateMap = {}, initValue = {}) {
    transformSchema(schema, configValue, validateMap);
    const reader = new CliReader({
      schema: setInitValues(schema, initValue),
      extra: configValue
    });
    return new Promise((resolve, reject) => {
      reader.startQuestion({
        onComplete: answers => {
          const inputData = _merge(answers, configValue);

          this.generatorContext.config = _merge(this.generatorContext.config, inputData);
          resolve(inputData);
        },
        onError: error => {
          reject(error);
        }
      });
    });
  }

}