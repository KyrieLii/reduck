"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWorkflow = exports.createWorkflow = void 0;

var _farrowPipeline = require("../farrow-pipeline");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const WORKFLOW_SYMBOL = Symbol.for('MODERN_WORKFLOW');

const createWorkflow = () => {
  const pipeline = (0, _farrowPipeline.createPipeline)();

  const use = (...input) => {
    pipeline.use(...input.map(mapWorkerToMiddleware));
    return workflow;
  };

  const run = async (input, options) => {
    const result = pipeline.run(input, _objectSpread(_objectSpread({}, options), {}, {
      onLast: () => []
    }));
    return result.filter(Boolean);
  };

  const workflow = _objectSpread(_objectSpread({}, pipeline), {}, {
    use,
    run,
    [WORKFLOW_SYMBOL]: true
  });

  return workflow;
};

exports.createWorkflow = createWorkflow;

const isWorkflow = input => Boolean(input === null || input === void 0 ? void 0 : input[WORKFLOW_SYMBOL]);

exports.isWorkflow = isWorkflow;

const mapWorkerToMiddleware = worker => (input, next) => [worker(input), ...next(input)];