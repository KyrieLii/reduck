import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import path from 'path';
import { PLUGIN_SCHEMAS, createRuntimeExportsUtils, cleanRequireCache } from '@modern-js/utils';
import PluginState from '@modern-js/plugin-state/cli';
import PluginRouter from '@modern-js/plugin-router/cli';
import PluginSSR from '@modern-js/plugin-ssr/cli';
export default (function () {
  return {
    name: '@modern-js/runtime',
    post: ['@modern-js/plugin-router', '@modern-js/plugin-ssr', '@modern-js/plugin-state', '@modern-js/plugin-design-token'],
    usePlugins: [PluginState(), PluginRouter(), PluginSSR()],
    setup: function setup(api) {
      var runtimeExportsUtils = {};
      return {
        config: function config() {
          var dir = api.useAppContext().internalDirectory;
          runtimeExportsUtils = createRuntimeExportsUtils(dir, 'index');
          return {
            runtime: {},
            runtimeByEntries: {},
            source: {
              alias: {
                '@modern-js/runtime$': runtimeExportsUtils.getPath()
              }
            }
          };
        },
        validateSchema: function validateSchema() {
          return PLUGIN_SCHEMAS['@modern-js/runtime'];
        },
        addRuntimeExports: function addRuntimeExports() {
          var runtimePackage = path.resolve(__dirname, '../../../../');
          runtimeExportsUtils.addExport("export * from '".concat(runtimePackage, "'"));
        },
        beforeRestart: function beforeRestart() {
          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    cleanRequireCache([require.resolve('@modern-js/plugin-state/cli'), require.resolve('@modern-js/plugin-router/cli'), require.resolve('@modern-js/plugin-ssr/cli')]);

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }))();
        }
      };
    }
  };
});