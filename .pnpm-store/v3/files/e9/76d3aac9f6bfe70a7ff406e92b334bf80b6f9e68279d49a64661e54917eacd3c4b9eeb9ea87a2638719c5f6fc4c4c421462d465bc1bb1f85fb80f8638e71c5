"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildPlatform = void 0;

var _utils = require("@modern-js/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const lg = _utils.Import.lazy('./logger', require);

const pMap = _utils.Import.lazy('p-map', require);

const buildPlatform = async (api, option) => {
  const {
    isTsProject = false,
    platform
  } = option;
  const lm = new lg.LoggerManager(); // 获取platforms的参数

  const runners = api.useHookRunners();
  const buildTasks = await runners.platformBuild({
    isTsProject
  });

  if (buildTasks.length <= 0) {
    console.info(_utils.chalk.yellow('No build tasks detected.\nYou can use the `new` command to enable the more features'));
    return;
  }

  const loggerMap = {};
  const taskMapper = buildTasks.filter(task => platform === 'all' || task.name === platform).map(params => {
    const logger = lm.createLoggerText({
      title: params.title
    });
    loggerMap[params.name] = logger;
    return _objectSpread({
      logger
    }, params);
  });

  if (taskMapper.length <= 0) {
    console.info(_utils.chalk.yellow(`'${platform}' is undefined task`));
    return;
  }

  lm.showCompiling();
  await pMap(taskMapper, async ({
    taskPath,
    params,
    logger: _
  }) => {
    const childProcess = _utils.execa.node(taskPath, params, {
      stdio: 'inherit',
      all: true
    }); // lm.addStdout(logger, childProcess.stdout, {
    //   event: { data: true, error: true },
    // });
    // lm.addStderr(logger, childProcess.stderr);


    try {
      await childProcess;
    } catch (_unused) {
      // eslint-disable-next-line no-process-exit
      process.exit(1);
    } // lm.disappearCompiling();
    // console.info(lg.colors.title(title));
    // console.info(a.all);

  }, {
    concurrency: 1
  }); // lm.disappearCompiling();
  // for (const key of Object.keys(loggerMap)) {
  //   console.info(loggerMap[key].value);
  // }
};

exports.buildPlatform = buildPlatform;