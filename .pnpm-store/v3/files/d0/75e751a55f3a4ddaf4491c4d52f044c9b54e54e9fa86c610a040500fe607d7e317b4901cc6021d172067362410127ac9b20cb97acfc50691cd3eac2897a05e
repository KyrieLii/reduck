"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _utils = require("@modern-js/utils");

require("../types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PLUGIN_IDENTIFIER = 'state';

var _default = () => ({
  name: '@modern-js/plugin-state',
  required: ['@modern-js/runtime'],
  setup: api => {
    const stateConfigMap = new Map();
    let pluginsExportsUtils;

    const stateModulePath = _path.default.resolve(__dirname, '../../../../');

    return {
      config() {
        const appContext = api.useAppContext();
        pluginsExportsUtils = (0, _utils.createRuntimeExportsUtils)(appContext.internalDirectory, 'plugins');
        return {
          source: {
            alias: {
              '@modern-js/runtime/plugins': pluginsExportsUtils.getPath()
            }
          }
        };
      },

      modifyEntryImports({
        entrypoint,
        imports
      }) {
        var _getEntryOptions;

        const {
          entryName
        } = entrypoint;
        const userConfig = api.useResolvedConfigContext();
        const {
          packageName
        } = api.useAppContext();
        const stateConfig = (_getEntryOptions = (0, _utils.getEntryOptions)(entryName, userConfig.runtime, userConfig.runtimeByEntries, packageName)) === null || _getEntryOptions === void 0 ? void 0 : _getEntryOptions.state;
        stateConfigMap.set(entryName, stateConfig);

        const getEnabledPlugins = () => {
          const internalPlugins = ['immer', 'effects', 'autoActions', 'devtools'];
          return internalPlugins.filter(name => stateConfig[name] !== false);
        };

        if (stateConfig) {
          imports.push({
            value: '@modern-js/runtime/plugins',
            specifiers: [{
              imported: PLUGIN_IDENTIFIER
            }]
          });
          imports.push({
            value: '@modern-js/runtime/model',
            specifiers: getEnabledPlugins().map(imported => ({
              imported
            })),
            initialize: `
                const createStatePlugins = (config) => {
                  const plugins = [];

                  ${getEnabledPlugins().map(name => `
                      plugins.push(${name}(config['${name}']));
                      `).join('\n')}

                  return plugins;
                }
              `
          });
        }

        return {
          entrypoint,
          imports
        };
      },

      modifyEntryRuntimePlugins({
        entrypoint,
        plugins
      }) {
        const stateOptions = stateConfigMap.get(entrypoint.entryName);

        if (stateOptions) {
          const isBoolean = typeof stateOptions === 'boolean';
          let options = isBoolean ? '{}' : JSON.stringify(stateOptions);
          options = `${options.substr(0, options.length - 1)}${isBoolean ? '' : ','}plugins: createStatePlugins(${JSON.stringify(stateConfigMap.get(entrypoint.entryName))})}`;
          plugins.push({
            name: PLUGIN_IDENTIFIER,
            options
          });
        }

        return {
          entrypoint,
          plugins
        };
      },

      validateSchema() {
        return _utils.PLUGIN_SCHEMAS['@modern-js/plugin-state'];
      },

      addRuntimeExports() {
        pluginsExportsUtils.addExport(`export { default as state } from '${stateModulePath}'`);
      }

    };
  }
});

exports.default = _default;