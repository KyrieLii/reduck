"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canUseGit = canUseGit;
exports.gitAdd = gitAdd;
exports.gitCommit = gitCommit;
exports.initGitRepo = initGitRepo;
exports.isInGitRepo = isInGitRepo;

var _utils = require("@modern-js/utils");

async function canUseGit() {
  try {
    await (0, _utils.execa)('git', ['--version'], {
      env: process.env
    });
    return true;
  } catch (e) {
    return false;
  }
}

async function isInGitRepo(cwd) {
  try {
    await (0, _utils.execa)('git', ['rev-parse', '--is-inside-work-tree'], {
      env: process.env,
      cwd
    });
    return true;
  } catch (e) {
    return false;
  }
}

async function initGitRepo(cwd, defaultBranch) {
  await (0, _utils.execa)('git', ['init'], {
    env: process.env,
    cwd
  });
  const {
    stdout
  } = await (0, _utils.execa)('git', ['symbolic-ref', '--short', 'HEAD'], {
    env: process.env,
    cwd
  });

  if (stdout !== defaultBranch) {
    await (0, _utils.execa)('git', ['checkout', '-b', defaultBranch], {
      env: process.env,
      cwd
    });
  }
}

async function gitAdd(cwd) {
  await (0, _utils.execa)('git', ['add', '-A'], {
    env: process.env,
    cwd
  });
}

async function gitCommit(cwd, commitMessage) {
  await (0, _utils.execa)('git', ['commit', '-m', commitMessage, '--no-verify'], {
    env: process.env,
    cwd
  });
}