"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobPattern = exports.getFinalExtensions = exports.getFinalCompilerOption = exports.getFilesFromDir = void 0;

var _utils = require("@modern-js/utils");

var _core = require("@babel/core");

var _defaults = require("./defaults");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getGlobPattern = (dir, extensions) => {
  if (extensions.length > 1) {
    return `${dir}/**/*{${extensions.join(',')}}`;
  } else if (extensions.length === 1) {
    return `${dir}/**/*${extensions[0]}`;
  } else {
    return `${dir}/**/*`;
  }
};

exports.getGlobPattern = getGlobPattern;

const getFinalExtensions = extensions => {
  const isExtensions = ext => Array.isArray(ext);

  const isExtensionsFunc = ext => typeof ext === 'function';

  if (isExtensions(extensions)) {
    return [...extensions, ..._core.DEFAULT_EXTENSIONS];
  } else if (isExtensionsFunc(extensions)) {
    return extensions(_core.DEFAULT_EXTENSIONS);
  } else {
    return _core.DEFAULT_EXTENSIONS;
  }
};

exports.getFinalExtensions = getFinalExtensions;

const getFilesFromDir = ({
  dir,
  finalExt: _finalExt = [],
  ignore: _ignore = []
}) => {
  let globFindFilenames = [];
  const globPattern = getGlobPattern(dir, _finalExt);
  globFindFilenames = _utils.glob.sync(globPattern, {
    ignore: _ignore
  });
  return globFindFilenames;
};

exports.getFilesFromDir = getFilesFromDir;

const getFinalCompilerOption = option => {
  const optionWithDefault = (0, _defaults.mergeDefaultOption)(option);
  const {
    sourceDir,
    ignore,
    enableWatch = false,
    watchDir,
    extensions = _core.DEFAULT_EXTENSIONS
  } = option;
  let globFindFilenames = [];
  const finalExt = getFinalExtensions(extensions);

  if (sourceDir) {
    globFindFilenames = getFilesFromDir({
      dir: sourceDir,
      ignore,
      finalExt
    });
  }

  if (enableWatch) {
    // 开启watch模式，清空通过 sourceDir 找到的文件，而改为使用watchDirs
    globFindFilenames = getFilesFromDir({
      dir: watchDir,
      ignore,
      finalExt
    });
  }

  return _objectSpread(_objectSpread({}, optionWithDefault), {}, {
    filenames: [...optionWithDefault.filenames, ...globFindFilenames]
  });
};

exports.getFinalCompilerOption = getFinalCompilerOption;