"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readCompilerOptions = exports.getModuleNameMapper = exports.debug = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _utils = require("@modern-js/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _utils.createDebugger)('test');
exports.debug = debug;

/**
 * Read `compilerOptions` in the current pwd's tsconfig.json file
 */
const readCompilerOptions = (pwd = process.cwd(), filename = 'tsconfig.json') => {
  let tsConfig = {};
  let extendedCompilerOptions = {};
  let tsconfigFile = '';

  try {
    const maybeTsconfigFile = _path.default.join(pwd, filename);

    if (_fs.default.existsSync(maybeTsconfigFile)) {
      tsconfigFile = maybeTsconfigFile;
    } else {
      tsconfigFile = require.resolve(filename);
    }

    ({
      config: tsConfig
    } = require('typescript').parseConfigFileTextToJson(tsconfigFile, _fs.default.readFileSync(tsconfigFile, 'utf8')));
  } catch (e) {
    return {};
  }

  if (tsConfig.extends) {
    extendedCompilerOptions = readCompilerOptions(_path.default.dirname(tsconfigFile), tsConfig.extends);
  }

  return _objectSpread(_objectSpread({}, extendedCompilerOptions), tsConfig.compilerOptions);
};

exports.readCompilerOptions = readCompilerOptions;

const getModuleNameMapper = alias => Object.keys(alias).reduce((memo, cur) => {
  const aliasValue = Array.isArray(alias[cur]) ? alias[cur] : [alias[cur]];
  const isFile = aliasValue.some(s => s.endsWith('.js')); // It's special for if using @modern-js/runtime alias other module @modern-js/runtime/model would not work.

  if (cur === '@modern-js/runtime$') {
    memo[`.+${cur}`] = aliasValue[0];
    return memo;
  }

  if (isFile) {
    memo[cur] = aliasValue[0];
  }

  const key = `^${cur}/(.*)$`;

  const value = _path.default.normalize(`${aliasValue}/$1`);

  memo[key] = value;
  return memo;
}, {});

exports.getModuleNameMapper = getModuleNameMapper;