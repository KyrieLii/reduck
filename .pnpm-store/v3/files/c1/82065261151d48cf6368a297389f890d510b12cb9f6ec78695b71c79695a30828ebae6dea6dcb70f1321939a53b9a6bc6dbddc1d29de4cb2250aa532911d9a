import { FormatFields, FormatType, FormatTypes } from 'farrow-schema/formatter';
import { FormatResult, FormatApi } from './toJSON';
export declare const isInlineType: (input: FormatType) => boolean;
export declare const getFieldType: (typeId: number, types: FormatTypes) => string;
export declare const getFieldsType: (fields: FormatFields, types: FormatTypes) => string[];
export declare type ApiClientHelpers = {
    importStatements: (formatResult: FormatResult, options?: CodegenOptions) => string[];
    typeDeclarations: (formatResult: FormatResult, options?: CodegenOptions) => string[];
    variableDeclarations: (formatResult: FormatResult, options?: CodegenOptions) => string[];
    apiFunctionParams: (formatApi: FormatApi, path: string[], formatResult: FormatResult, options?: CodegenOptions) => string;
    apiFunctionBody: (formatApi: FormatApi, path: string[], formatResult: FormatResult, options?: CodegenOptions) => string;
};
export declare type CodegenOptions = {
    /**
     * emit createApiClient or not
     * if set to false, only types will be codegen
     */
    apiClientHelpers?: ApiClientHelpers | false;
    /**
     * a remote address or alias to invoke
     */
    url?: string;
    /**
     * add ts-nocheck or not
     */
    noCheck?: boolean | string;
};
export declare const PREFIX_COMMENT = "\n/**\n * This file was generated by farrow-api\n * Don't modify it manually\n */\n";
export declare const generateApi: (formatResult: FormatResult, options?: CodegenOptions | undefined) => string;
