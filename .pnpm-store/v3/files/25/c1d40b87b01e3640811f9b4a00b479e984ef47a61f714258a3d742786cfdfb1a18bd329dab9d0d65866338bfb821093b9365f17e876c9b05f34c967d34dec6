"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderHandler = void 0;

var _path = _interopRequireDefault(require("path"));

var _utils = require("@modern-js/utils");

var _constants = require("../../constants");

var _static = require("./static");

var _reader = require("./reader");

var ssr = _interopRequireWildcard(require("./ssr"));

var _modern = require("./modern");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createRenderHandler = ({
  distDir,
  staticGenerate
}) => async function render({
  ctx,
  route,
  runner
}) {
  if (ctx.resHasHandled()) {
    return null;
  }

  const {
    entryPath,
    urlPath
  } = route;

  const entry = _path.default.join(distDir, entryPath);

  if (!route.isSPA) {
    const result = await (0, _static.handleDirectory)(ctx, entry, urlPath);
    return result;
  } // only spa can use es6-html


  const modernEntry = (0, _modern.getModernEntry)(entry);

  const useModern = // route.enableModernMode &&
  (0, _modern.supportModern)(ctx) && _utils.fs.existsSync(modernEntry);

  const templateHTML = useModern ? modernEntry : entry; // handles ssr first

  if (route.isSSR) {
    try {
      const result = await ssr.render(ctx, {
        distDir,
        entryName: route.entryName,
        urlPath: route.urlPath,
        bundle: route.bundle,
        template: templateHTML,
        staticGenerate
      }, runner);
      return result;
    } catch (err) {
      ctx.error(_constants.ERROR_DIGEST.ERENDER, err.stack);
      ctx.res.setHeader('x-modern-ssr-fallback', '1');
    }
  }

  const content = await (0, _reader.readFile)(templateHTML);

  if (!content) {
    return null;
  }

  return {
    content,
    contentType: _utils.mime.contentType(_path.default.extname(templateHTML))
  };
};

exports.createRenderHandler = createRenderHandler;