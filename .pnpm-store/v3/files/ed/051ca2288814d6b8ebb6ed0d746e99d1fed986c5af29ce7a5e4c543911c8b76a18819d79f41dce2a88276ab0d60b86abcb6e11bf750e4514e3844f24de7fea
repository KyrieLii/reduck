function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import fs from 'fs';
import path from 'path';
import { semver } from '@modern-js/utils';
export const isBeyondReact17 = cwd => {
  const pkgInfo = JSON.parse(fs.readFileSync(path.join(cwd, 'package.json'), 'utf8'));

  const deps = _objectSpread(_objectSpread({}, pkgInfo.devDependencies), pkgInfo.dependencies);

  if (typeof deps.react !== 'string') {
    return false;
  }

  return semver.satisfies(semver.minVersion(deps.react), '>=17.0.0');
}; // export const isPnpm = (appDirectory: string) => {
//   // pnpm 以及 rush 场景需要编译
//   const currentDir = appDirectory || process.cwd();
//   if (findMonorepoRoot(currentDir)) {
//     return getPkgManager(currentDir) === 'pnpm';
//   } else if (
//     fs.existsSync(path.resolve(currentDir, './pnpm-lock.yaml')) ||
//     fs.existsSync(path.resolve(currentDir, './.rush'))
//   ) {
//     return true;
//   }
//   return false;
// };