import { chalk, Import, inquirer } from '@modern-js/utils';
const color = Import.lazy('../../utils/color', require);
export const showMenu = async (api, config) => {
  const runners = api.useHookRunners();
  const metas = await runners.moduleToolsMenu(undefined);

  if (metas.length <= 0) {
    console.info(chalk.yellow('No runnable development features found.\nYou can use the `new` command to enable the development features')); // eslint-disable-next-line no-process-exit

    process.exit(0);
  }

  const menuMessage = color.devMenuTitle('Select the debug mode:');
  const {
    type
  } = await inquirer.prompt([{
    name: 'type',
    message: menuMessage,
    type: 'list',
    choices: metas
  }]);
  const devMeta = metas.find(meta => meta.value === type);

  if (devMeta) {
    await devMeta.runTask(config);
  }
};
export const devStorybook = async (api, config) => {
  const runners = api.useHookRunners();
  const metas = await runners.moduleToolsMenu(undefined);
  const findStorybook = metas.find(meta => meta.value === 'storybook');

  if (findStorybook) {
    await findStorybook.runTask(config);
  } else {
    console.info(chalk.yellow('No development features found.\nYou can use the `new` command to enable the development features')); // eslint-disable-next-line no-process-exit

    process.exit(0);
  }
};
export const runSubCmd = async (api, subCmd, config) => {
  const runners = api.useHookRunners();
  const metas = await runners.moduleToolsMenu(undefined);
  const devMeta = metas.find(meta => meta.value === subCmd || Array.isArray(meta.aliasValues) && meta.aliasValues.includes(subCmd));

  if (devMeta) {
    await devMeta.runTask(config);
  } else {
    // eslint-disable-next-line no-process-exit
    process.exit(0);
  }
};