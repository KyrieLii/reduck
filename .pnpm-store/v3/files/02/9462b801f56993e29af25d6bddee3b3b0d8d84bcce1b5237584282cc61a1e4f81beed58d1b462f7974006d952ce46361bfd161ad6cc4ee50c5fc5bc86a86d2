import * as path from 'path';
import { fs, glob, watch, WatchChangeType, Import } from '@modern-js/utils';
const logger = Import.lazy('../features/build/logger', require);
const cssConfig = Import.lazy('@modern-js/css-config', require);
const hooks = Import.lazy('../hooks', require);
const core = Import.lazy('@modern-js/core', require);
const compiler = Import.lazy('@modern-js/style-compiler', require);
const STYLE_DIRS = 'styles';
const SRC_STYLE_DIRS = 'src';

const checkStylesDirExist = option => {
  const {
    appDirectory
  } = option;
  return fs.existsSync(path.join(appDirectory, STYLE_DIRS));
};

const generatorFileAndReturnLog = (result, successMessage = '') => {
  if (result.code === 0) {
    for (const file of result.dists) {
      fs.ensureFileSync(file.filename);
      fs.writeFileSync(file.filename, file.content);
    }

    return successMessage;
  } else {
    return result.errors.join('\n');
  }
};

const getPostcssOption = (appDirectory, modernConfig) => {
  var _postcssOption$postcs;

  const postcssOption = cssConfig.getPostcssConfig(appDirectory, modernConfig, false);
  return {
    plugins: (postcssOption === null || postcssOption === void 0 ? void 0 : (_postcssOption$postcs = postcssOption.postcssOptions) === null || _postcssOption$postcs === void 0 ? void 0 : _postcssOption$postcs.plugins) || [],
    enableSourceMap: (postcssOption === null || postcssOption === void 0 ? void 0 : postcssOption.sourceMap) || false,
    options: {}
  };
};

const copyOriginStyleFiles = ({
  targetDir,
  outputDir
}) => {
  const styleFiles = glob.sync(`${targetDir}/**/*.{css,sass,scss,less}`);

  if (styleFiles.length > 0) {
    fs.ensureDirSync(outputDir);
  }

  for (const styleFile of styleFiles) {
    const file = path.relative(targetDir, styleFile);
    fs.ensureFileSync(path.join(outputDir, file));
    fs.copyFileSync(styleFile, path.join(outputDir, file));
  }
};

const logCompilerMessage = compilerMessage => {
  console.info(logger.clearFlag);
  console.info(compilerMessage.src);
  console.info(compilerMessage.styles);
};

const taskMain = async ({
  modernConfig,
  appContext
}) => {
  const {
    assetsPath = 'styles',
    path: outputPath = 'dist',
    jsPath = 'js',
    importStyle
  } = modernConfig.output;
  const {
    appDirectory
  } = appContext;
  const lessOption = await core.mountHook().moduleLessConfig({
    modernConfig
  }, {
    onLast: async _ => null
  });
  const sassOption = await core.mountHook().moduleSassConfig({
    modernConfig
  }, {
    onLast: async _ => null
  });
  const postcssOption = getPostcssOption(appDirectory, modernConfig);
  const existStylesDir = checkStylesDirExist({
    appDirectory
  });
  const compilerMessage = {
    src: '',
    styles: ''
  }; // 编译 styles 目录样式

  let styleEmitter = null;

  if (existStylesDir) {
    styleEmitter = compiler.styleCompiler({
      watch: true,
      projectDir: appDirectory,
      stylesDir: path.resolve(appDirectory, STYLE_DIRS),
      outDir: path.join(appDirectory, outputPath, assetsPath),
      enableVirtualDist: true,
      compilerOption: {
        less: lessOption,
        sass: sassOption,
        postcss: postcssOption
      }
    });
    styleEmitter.on(compiler.BuildWatchEvent.firstCompiler, styleResult => {
      compilerMessage.styles = generatorFileAndReturnLog(styleResult, `[Style Compiler] Successfully for 'styles' dir`);
      logCompilerMessage(compilerMessage);
    });
    styleEmitter.on(compiler.BuildWatchEvent.compilering, () => {
      compilerMessage.styles = `[${assetsPath}] Compiling...`;
      logCompilerMessage(compilerMessage);
    });
    styleEmitter.on(compiler.BuildWatchEvent.watchingCompiler, styleResult => {
      compilerMessage.styles = generatorFileAndReturnLog(styleResult, `[Style Compiler] Successfully for 'styles' dir`);
      logCompilerMessage(compilerMessage);
    }); // await styleEmitter.watch();
  } // 编译 src 内的样式代码


  const srcDir = path.resolve(appDirectory, SRC_STYLE_DIRS);
  const outputDirToSrc = path.join(appDirectory, outputPath, jsPath, assetsPath);

  if (importStyle === 'compiled-code') {
    compilerMessage.src = `[src] Compiling`;
    const srcStyleEmitter = compiler.styleCompiler({
      watch: true,
      projectDir: appDirectory,
      stylesDir: srcDir,
      outDir: outputDirToSrc,
      enableVirtualDist: true,
      compilerOption: {
        less: lessOption,
        sass: sassOption,
        postcss: postcssOption
      }
    });
    srcStyleEmitter.on(compiler.BuildWatchEvent.firstCompiler, srcStyleResult => {
      compilerMessage.src = generatorFileAndReturnLog(srcStyleResult, `[Style Compiler] Successfully for 'src' dir`);
      logCompilerMessage(compilerMessage);
    });
    srcStyleEmitter.on(compiler.BuildWatchEvent.compilering, () => {
      compilerMessage.src = `[src] Compiling`;
      logCompilerMessage(compilerMessage);
    });
    srcStyleEmitter.on(compiler.BuildWatchEvent.watchingCompiler, srcStyleResult => {
      compilerMessage.src = generatorFileAndReturnLog(srcStyleResult, `[Style Compiler] Successfully for 'src' dir`);
      logCompilerMessage(compilerMessage);
    });
    styleEmitter && (await styleEmitter.watch());
    await srcStyleEmitter.watch();
  } else {
    compilerMessage.src = `['src' dir] Copying in progress`;
    styleEmitter && (await styleEmitter.watch());
    logCompilerMessage(compilerMessage);
    copyOriginStyleFiles({
      targetDir: srcDir,
      outputDir: outputDirToSrc
    });
    compilerMessage.src = `[Style Compiler] Successfully for 'src' dir`;
    logCompilerMessage(compilerMessage);
    watch(`${srcDir}/**/*.{css,less,sass,scss}`, ({
      changeType,
      changedFilePath
    }) => {
      compilerMessage.src = `['src' dir] Copying in progress`;
      logCompilerMessage(compilerMessage);

      if (changeType === WatchChangeType.UNLINK) {
        const removeFile = path.normalize(`${outputDirToSrc}/${path.relative(srcDir, changedFilePath)}`);
        fs.removeSync(removeFile);
      } else {
        copyOriginStyleFiles({
          targetDir: srcDir,
          outputDir: outputDirToSrc
        });
      }

      compilerMessage.src = `[Style Compiler] Successfully for 'src' dir`;
      logCompilerMessage(compilerMessage);
    });
  }
};

(async () => {
  let options;

  if (process.env.CORE_INIT_OPTION_FILE) {
    ({
      options
    } = require(process.env.CORE_INIT_OPTION_FILE));
  }

  hooks.buildLifeCycle();
  const {
    resolved: modernConfig,
    appContext
  } = await core.cli.init([], options);
  await core.manager.run(async () => {
    try {
      await taskMain({
        modernConfig,
        appContext
      });
    } catch (e) {
      console.error(e);
    }
  });
})();