"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStorage = void 0;
const ah = __importStar(require("async_hooks"));
const createStorage = () => {
    let storage;
    if (typeof ah.AsyncLocalStorage !== 'undefined') {
        storage = new ah.AsyncLocalStorage();
    }
    const run = (context, cb) => {
        if (!storage) {
            throw new Error(`Unable to use async_hook, please confirm the node version >= 12.17
        `);
        }
        return new Promise((resolve, reject) => {
            storage.run(context, () => {
                try {
                    return resolve(cb());
                }
                catch (error) {
                    return reject(error);
                }
            });
        });
    };
    const useContext = () => {
        if (!storage) {
            throw new Error(`Unable to use async_hook, please confirm the node version >= 12.17
        `);
        }
        const context = storage.getStore();
        if (!context) {
            throw new Error(`Can't call useContext out of scope, make sure @modern-js/utils is a single version in node_modules`);
        }
        return context;
    };
    return {
        run,
        useContext,
    };
};
exports.createStorage = createStorage;
