import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { runWithContainer, createContainer } from "../farrow-pipeline";
import { isObject, generateRunner, hasOwnProperty, DEFAULT_OPTIONS } from "./sync";
import { useRunner } from "./runner";
var ASYNC_PLUGIN_SYMBOL = 'ASYNC_PLUGIN_SYMBOL';
export var createAsyncManager = function createAsyncManager(hooks, api) {
  var index = 0;

  var currentHooks = _objectSpread({}, hooks);

  var registerHook = function registerHook(extraHooks) {
    currentHooks = _objectSpread(_objectSpread({}, extraHooks), currentHooks);
  };

  var isPlugin = function isPlugin(input) {
    return isObject(input) && hasOwnProperty(input, ASYNC_PLUGIN_SYMBOL) && input[ASYNC_PLUGIN_SYMBOL] === ASYNC_PLUGIN_SYMBOL;
  };

  var pluginAPI = _objectSpread(_objectSpread({}, api), {}, {
    useHookRunners: useRunner
  });

  var clone = function clone(overrideAPI) {
    var plugins = [];

    var addPlugin = function addPlugin(plugin) {
      if (!includeAsyncPlugin(plugins, plugin)) {
        plugins.push(_objectSpread({}, plugin));
      }
    };

    var usePlugin = function usePlugin() {
      for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {
        input[_key] = arguments[_key];
      }

      for (var _i = 0, _input = input; _i < _input.length; _i++) {
        var plugin = _input[_i];

        // already created by createPlugin
        if (isPlugin(plugin)) {
          addPlugin(plugin);
        } // using function to return plugin options
        else if (typeof plugin === 'function') {
          var _options = plugin();

          addPlugin(createPlugin(_options.setup, _options));
        } // plain plugin object
        else if (isObject(plugin)) {
          addPlugin(createPlugin(plugin.setup, plugin));
        } // unknown plugin
        else {
          console.warn("Unknown plugin: ".concat(JSON.stringify(plugin)));
        }
      }

      return manager;
    };

    var createPlugin = function createPlugin() {
      var _options$usePlugins;

      var setup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if ((_options$usePlugins = options.usePlugins) !== null && _options$usePlugins !== void 0 && _options$usePlugins.length) {
        options.usePlugins.forEach(function (plugin) {
          usePlugin(createPlugin(plugin.setup, plugin));
        });
      }

      if (options.registerHook) {
        registerHook(options.registerHook);
      }

      return _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), {}, {
        name: "No.".concat(index++, " plugin")
      }, options), {}, {
        ASYNC_PLUGIN_SYMBOL: ASYNC_PLUGIN_SYMBOL,
        setup: setup
      });
    };

    var clear = function clear() {
      plugins = [];
    };

    var currentContainer = createContainer();

    var init = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var container, sortedPlugins, mergedPluginAPI, hooksList;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                container = (options === null || options === void 0 ? void 0 : options.container) || currentContainer;
                sortedPlugins = sortAsyncPlugins(plugins);
                mergedPluginAPI = _objectSpread(_objectSpread({}, pluginAPI), overrideAPI);
                checkAsyncPlugins(sortedPlugins);
                _context.next = 6;
                return Promise.all(sortedPlugins.map(function (plugin) {
                  return runWithContainer(function () {
                    return plugin.setup(mergedPluginAPI);
                  }, container);
                }));

              case 6:
                hooksList = _context.sent;
                return _context.abrupt("return", generateRunner(hooksList, container, currentHooks));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function init(_x) {
        return _ref.apply(this, arguments);
      };
    }();

    var run = function run(cb, options) {
      var container = (options === null || options === void 0 ? void 0 : options.container) || currentContainer;
      return runWithContainer(cb, container);
    };

    var manager = {
      createPlugin: createPlugin,
      isPlugin: isPlugin,
      usePlugin: usePlugin,
      init: init,
      run: run,
      clear: clear,
      clone: clone,
      registerHook: registerHook,
      useRunner: useRunner
    };
    return manager;
  };

  return clone();
};

var includeAsyncPlugin = function includeAsyncPlugin(plugins, input) {
  var _iterator = _createForOfIteratorHelper(plugins),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var plugin = _step.value;

      if (plugin.name === input.name) {
        return true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return false;
};

var sortAsyncPlugins = function sortAsyncPlugins(input) {
  var plugins = input.slice();

  for (var i = 0; i < plugins.length; i++) {
    var plugin = plugins[i];

    var _iterator2 = _createForOfIteratorHelper(plugin.pre),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var pre = _step2.value;

        for (var j = i + 1; j < plugins.length; j++) {
          if (plugins[j].name === pre) {
            plugins = [].concat(_toConsumableArray(plugins.slice(0, i)), [plugins[j]], _toConsumableArray(plugins.slice(i, j)), _toConsumableArray(plugins.slice(j + 1, plugins.length)));
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var _iterator3 = _createForOfIteratorHelper(plugin.post),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var post = _step3.value;

        for (var _j = 0; _j < i; _j++) {
          if (plugins[_j].name === post) {
            plugins = [].concat(_toConsumableArray(plugins.slice(0, _j)), _toConsumableArray(plugins.slice(_j + 1, i + 1)), [plugins[_j]], _toConsumableArray(plugins.slice(i + 1, plugins.length)));
          }
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  return plugins;
};

var checkAsyncPlugins = function checkAsyncPlugins(plugins) {
  var _iterator4 = _createForOfIteratorHelper(plugins),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var origin = _step4.value;

      var _iterator5 = _createForOfIteratorHelper(origin.rivals),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var rival = _step5.value;

          var _iterator7 = _createForOfIteratorHelper(plugins),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var plugin = _step7.value;

              if (rival === plugin.name) {
                throw new Error("".concat(origin.name, " has rival ").concat(plugin.name));
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = _createForOfIteratorHelper(origin.required),
          _step6;

      try {
        var _loop = function _loop() {
          var required = _step6.value;

          if (!plugins.some(function (plugin) {
            return plugin.name === required;
          })) {
            throw new Error("The plugin: ".concat(required, " is required when plugin: ").concat(origin.name, " is exist."));
          }
        };

        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
};