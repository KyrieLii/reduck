"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runJest = runJest;
exports.runTest = runTest;

var _yargs = _interopRequireDefault(require("yargs/yargs"));

var _jest = require("jest");

var _utils = require("@modern-js/utils");

var _config = require("./config");

var _utils2 = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file run jest by nodejs API
 * @description
 * Jest does not provide node API to run jest.
 * The followed code is inspired by
 * https://github.com/facebook/jest/blob/fdc74af37235354e077edeeee8aa2d1a4a863032/packages/jest-cli/src/cli/index.ts#L21
 */
const buildArgv = async (rawArgv, config) => {
  const argv = await (0, _yargs.default)(rawArgv).argv;
  const result = {
    $0: argv.$0,
    _: argv._.slice(1)
  };
  Object.keys(argv).forEach(key => {
    if (key.includes('-') || key === '_') {
      return;
    }

    result[key] = argv[key];
  });

  if (config) {
    result.config = JSON.stringify(config);
  }

  return result;
};

const readResultsAndExit = (result, globalConfig) => {
  const code = !result || result.success ? 0 : globalConfig.testFailureExitCode; // Only exit if needed

  process.on('exit', () => {
    if (typeof code === 'number' && code !== 0) {
      process.exitCode = code;
    }
  });

  if (globalConfig.forceExit) {
    if (!globalConfig.detectOpenHandles) {
      console.warn(`${_utils.chalk.bold('Force exiting Jest: ')}Have you considered using \`--detectOpenHandles\` to detect ` + `async operations that kept running after all tests finished?`);
    } // eslint-disable-next-line no-process-exit


    process.exit(code);
  } else if (!globalConfig.detectOpenHandles) {
    setTimeout(() => {
      console.warn(_utils.chalk.yellow.bold('Jest did not exit one second after the test run has completed.\n\n') + _utils.chalk.yellow('This usually means that there are asynchronous operations that ' + "weren't stopped in your tests. Consider running Jest with " + '`--detectOpenHandles` to troubleshoot this issue.'));
    }, 1000).unref();
  }
};
/**
 * Node API: execute jest
 */


async function runJest(config, pwd = process.cwd()) {
  try {
    const argvConfig = await buildArgv(process.argv.slice(2), config);
    const {
      results,
      globalConfig
    } = await (0, _jest.runCLI)(argvConfig, [pwd]);
    readResultsAndExit(results, globalConfig);
  } catch (e) {
    console.error(_utils.chalk.red((e === null || e === void 0 ? void 0 : e.stack) || e)); // eslint-disable-next-line no-process-exit

    process.exit(1);
  }
}
/**
 * Node API: run test
 */


async function runTest(api, config, pwd = process.cwd()) {
  process.env.NODE_ENV = 'test';
  const jestUtils = (0, _config.getJestUtils)(config);
  await (0, _config.patchConfig)(jestUtils); // 确保用户设置的配置可以被插件处理，比如设置在 projects 中

  jestUtils.setJestUserConfig();
  const hookRunners = api.useHookRunners();
  const testConfigOperator = await hookRunners.jestConfig(jestUtils, {
    onLast: input => input
  });
  testConfigOperator.getFinalConfig();
  const finalConfig = testConfigOperator.jestConfig;
  (0, _utils2.debug)('Jest config:', finalConfig);
  await runJest(finalConfig, pwd);
  await hookRunners.afterTest();
}