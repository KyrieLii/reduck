import * as path from 'path';
import { FileSystem, JsonFile } from '@rushstack/node-core-library';
import { fs, yaml } from '@modern-js/utils';
import { getWorkspaceFile } from "../parse-config/monorepo";
import { WORKSPACE_FILE } from "../constants";
import { getProjectsByPackageConfig, syncGetProjectsByPackageConfig } from "./get-projects-by-packages-config";
export const getProjectsByWorkspaceFile = async (rootPath, config, ignoreConfigs) => {
  var _config$workspaceFile;

  let {
    workspaceFile
  } = config;

  if (!config.enableAutoFinder && (!('workspaceFile' in config) || ((_config$workspaceFile = config.workspaceFile) === null || _config$workspaceFile === void 0 ? void 0 : _config$workspaceFile.length) === 0)) {
    throw new Error('Missing workspaceFile Key or workspaceFile is empty string');
  }

  if (config.enableAutoFinder) {
    workspaceFile = getWorkspaceFile(rootPath);
  }

  let packagesConfig = [];

  if (workspaceFile === WORKSPACE_FILE.PNPM) {
    const yamlString = await FileSystem.readFileAsync(path.resolve('/', rootPath, workspaceFile)).then(data => data.toString());
    const pnpmWorkspace = yaml.load(yamlString);
    packagesConfig = pnpmWorkspace.packages || [];
  } else if (workspaceFile === WORKSPACE_FILE.YARN) {
    var _pkgJson$workspaces;

    const pkgJson = JsonFile.load(path.resolve(rootPath, workspaceFile));
    packagesConfig = (pkgJson === null || pkgJson === void 0 ? void 0 : (_pkgJson$workspaces = pkgJson.workspaces) === null || _pkgJson$workspaces === void 0 ? void 0 : _pkgJson$workspaces.packages) || [];
  } else if (workspaceFile === WORKSPACE_FILE.LERNA) {
    var _lernaJson$packages;

    const lernaJson = JsonFile.load(path.resolve(rootPath, workspaceFile));
    packagesConfig = (_lernaJson$packages = lernaJson.packages) !== null && _lernaJson$packages !== void 0 ? _lernaJson$packages : [];
  }

  const projects = await getProjectsByPackageConfig(rootPath, packagesConfig, ignoreConfigs);
  return projects;
};
export const syncGetProjectsByWorkspaceFile = (rootPath, config, ignoreConfigs) => {
  var _config$workspaceFile2;

  let {
    workspaceFile
  } = config;

  if (!config.enableAutoFinder && (!('workspaceFile' in config) || ((_config$workspaceFile2 = config.workspaceFile) === null || _config$workspaceFile2 === void 0 ? void 0 : _config$workspaceFile2.length) === 0)) {
    throw new Error('Missing workspaceFile Key or workspaceFile is empty string');
  }

  if (config.enableAutoFinder) {
    workspaceFile = getWorkspaceFile(rootPath);
  }

  let packagesConfig = [];

  if (workspaceFile === WORKSPACE_FILE.PNPM) {
    const yamlString = fs.readFileSync(path.resolve('/', rootPath, workspaceFile), 'utf-8');
    const pnpmWorkspace = yaml.load(yamlString);
    packagesConfig = pnpmWorkspace.packages || [];
  } else if (workspaceFile === WORKSPACE_FILE.YARN) {
    var _pkgJson$workspaces2;

    const pkgJson = JsonFile.load(path.resolve(rootPath, workspaceFile));
    packagesConfig = (pkgJson === null || pkgJson === void 0 ? void 0 : (_pkgJson$workspaces2 = pkgJson.workspaces) === null || _pkgJson$workspaces2 === void 0 ? void 0 : _pkgJson$workspaces2.packages) || [];
  } else if (workspaceFile === WORKSPACE_FILE.LERNA) {
    var _lernaJson$packages2;

    const lernaJson = JsonFile.load(path.resolve(rootPath, workspaceFile));
    packagesConfig = (_lernaJson$packages2 = lernaJson.packages) !== null && _lernaJson$packages2 !== void 0 ? _lernaJson$packages2 : [];
  }

  const projects = syncGetProjectsByPackageConfig(rootPath, packagesConfig, ignoreConfigs);
  return projects;
};