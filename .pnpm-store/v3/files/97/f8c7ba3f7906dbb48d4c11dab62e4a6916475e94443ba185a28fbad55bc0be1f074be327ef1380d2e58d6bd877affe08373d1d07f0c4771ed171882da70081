function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createPlugin } from '@modern-js-reduck/store';
import { createPromise } from 'redux-promise-middleware';
import thunk from 'redux-thunk';

/**
 * Generare dispatch action from effects definations.
 */
var createDispatchActionsFromEffects = function createDispatchActionsFromEffects(store, name, effects, setDispatchAction) {
  var path = [name];

  var traverse = function traverse(_effects) {
    if (typeof _effects === 'function') {
      var type = path.join('/').toUpperCase();
      setDispatchAction(path.slice(), function () {
        var value = _effects.apply(void 0, arguments);

        var dispatch = function dispatch(payload) {
          return store.dispatch({
            type: type,
            payload: payload
          });
        }; // Handled by promise middleware or redux thunk
        // Otherwise, do not dispatch action, just exec the effect fuction.


        if (value instanceof Promise || typeof value === 'function') {
          return dispatch(value);
        }

        return null;
      });
    } else {
      Object.keys(_effects).forEach(function (key) {
        path.push(key);
        traverse(_effects[key]);
        path.pop();
      });
    }
  };

  traverse(effects);
};

var plugin = createPlugin(function (context) {
  return {
    config: function config(storeConfig) {
      return _objectSpread(_objectSpread({}, storeConfig), {}, {
        middlewares: [].concat(_toConsumableArray(storeConfig.middlewares || []), [createPromise({
          promiseTypeDelimiter: '/'
        }), thunk])
      });
    },
    modelMount: function modelMount(_ref, _ref2) {
      var modelDesc = _ref.modelDesc,
          mountedModel = _ref.mountedModel;
      var setDispatchAction = _ref2.setDispatchAction;
      var effects = modelDesc.effects;

      if (!effects) {
        return {
          modelDesc: modelDesc,
          mountedModel: mountedModel
        };
      }

      createDispatchActionsFromEffects(context.store, modelDesc.name, modelDesc.effects, setDispatchAction);
      return {
        modelDesc: modelDesc,
        mountedModel: mountedModel
      };
    }
  };
});
export default plugin;