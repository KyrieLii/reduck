import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import ReactDOM from 'react-dom';
import { loadableReady } from '@loadable/component';
import { RenderLevel } from "./serverRender/type";
import { formatClient } from "./utils";
import { jsx as _jsx } from "react/jsx-runtime";

var ssr = function ssr() {
  return {
    name: '@modern-js/plugin-ssr',
    setup: function setup() {
      return {
        client: function () {
          var _client = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
            var _window, _window$_SSR_DATA;

            var App, context, rootElement, renderLevel, _prefetch, _ref2;

            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    App = _ref.App, context = _ref.context, rootElement = _ref.rootElement;
                    renderLevel = (_window = window) === null || _window === void 0 ? void 0 : (_window$_SSR_DATA = _window._SSR_DATA) === null || _window$_SSR_DATA === void 0 ? void 0 : _window$_SSR_DATA.renderLevel;

                    if (!(renderLevel === RenderLevel.CLIENT_RENDER)) {
                      _context.next = 8;
                      break;
                    }

                    _context.next = 5;
                    return App === null || App === void 0 ? void 0 : (_prefetch = (_ref2 = App).prefetch) === null || _prefetch === void 0 ? void 0 : _prefetch.call(_ref2, context);

                  case 5:
                    ReactDOM.render( /*#__PURE__*/_jsx(App, {
                      context: context
                    }), rootElement);
                    _context.next = 9;
                    break;

                  case 8:
                    if (renderLevel === RenderLevel.SERVER_RENDER) {
                      loadableReady(function () {
                        var hydrateContext = _objectSpread(_objectSpread({}, context), {}, {
                          _hydration: true
                        });

                        ReactDOM.hydrate( /*#__PURE__*/_jsx(App, {
                          context: hydrateContext
                        }), rootElement, function () {
                          // won't cause component re-render because context's reference identity doesn't change
                          delete hydrateContext._hydration;
                        });
                      });
                    } else {
                      // unknown renderlevel or renderlevel is server prefetch.
                      ReactDOM.render( /*#__PURE__*/_jsx(App, {
                        context: context
                      }), rootElement);
                    }

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function client(_x) {
            return _client.apply(this, arguments);
          }

          return client;
        }(),
        init: function init(_ref3, next) {
          var _window2, _window2$_SSR_DATA, _window2$_SSR_DATA$co;

          var context = _ref3.context;
          var request = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$_SSR_DATA = _window2._SSR_DATA) === null || _window2$_SSR_DATA === void 0 ? void 0 : (_window2$_SSR_DATA$co = _window2$_SSR_DATA.context) === null || _window2$_SSR_DATA$co === void 0 ? void 0 : _window2$_SSR_DATA$co.request;

          if (!request) {
            return next({
              context: context
            });
          }

          context.ssrContext.request = formatClient(request);
          return next({
            context: context
          });
        },
        pickContext: function pickContext(_ref4, next) {
          var _window3, _window3$_SSR_DATA, _window3$_SSR_DATA$co;

          var context = _ref4.context,
              pickedContext = _ref4.pickedContext;
          var request = (_window3 = window) === null || _window3 === void 0 ? void 0 : (_window3$_SSR_DATA = _window3._SSR_DATA) === null || _window3$_SSR_DATA === void 0 ? void 0 : (_window3$_SSR_DATA$co = _window3$_SSR_DATA.context) === null || _window3$_SSR_DATA$co === void 0 ? void 0 : _window3$_SSR_DATA$co.request;

          if (!request) {
            return next({
              context: context,
              pickedContext: pickedContext
            });
          }

          return next({
            context: context,
            pickedContext: _objectSpread(_objectSpread({}, pickedContext), {}, {
              request: request
            })
          });
        }
      };
    }
  };
};

export default ssr;
export * from "./react";