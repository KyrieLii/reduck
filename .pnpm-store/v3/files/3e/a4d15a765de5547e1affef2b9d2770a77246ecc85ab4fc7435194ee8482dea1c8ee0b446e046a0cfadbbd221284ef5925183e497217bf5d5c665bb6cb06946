"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRootElement = exports.useAppComponent = exports.runtime = exports.registerPrefetch = exports.registerInit = exports.createRuntime = exports.createPlugin = exports.AppComponentContext = void 0;

var _plugin = require("@modern-js/plugin");

var _loaderManager = require("./loader/loaderManager");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const hoc = (0, _plugin.createPipeline)(); // eslint-disable-next-line @typescript-eslint/no-empty-interface

const provide = (0, _plugin.createPipeline)();
const AppComponentContext = (0, _plugin.createContext)(null);
exports.AppComponentContext = AppComponentContext;

const useAppComponent = () => {
  const AppComponent = AppComponentContext.use().value;

  if (!AppComponent) {
    throw new Error(`Expect React.ComponentType, accept: null`);
  }

  return AppComponent;
};

exports.useAppComponent = useAppComponent;

const useRootElement = () => {
  const rootElement = AppComponentContext.use().value;

  if (!rootElement) {
    throw new Error(`Expect HTMLElement, accept: null`);
  }

  return rootElement;
};

exports.useRootElement = useRootElement;
const client = (0, _plugin.createAsyncPipeline)();
const server = (0, _plugin.createAsyncPipeline)();
const init = (0, _plugin.createAsyncPipeline)();
const pickContext = (0, _plugin.createPipeline)();
const runtimeHooks = {
  hoc,
  provide,
  client,
  server,
  init,
  pickContext
};
/** All hooks of runtime plugin. */

const createRuntime = () => (0, _plugin.createManager)(runtimeHooks);
/**
 * register init hook. It would be revoked both ssr and csr.
 */


exports.createRuntime = createRuntime;

const registerInit = (App, _init) => {
  const originalInit = App.init;

  App.init = async context => {
    if (!context.loaderManager) {
      context.loaderManager = (0, _loaderManager.createLoaderManager)({});
    }

    await Promise.all([originalInit === null || originalInit === void 0 ? void 0 : originalInit(context), _init === null || _init === void 0 ? void 0 : _init(context)]);
  };
};
/**
 * register prefetch hook. It would be revoked both ssr and csr.
 * But if ssr success, It wont exec in csr again.
 * If ssr prefetch failed, It will fallback to exec in csr.
 */


exports.registerInit = registerInit;

const registerPrefetch = (App, prefetch) => {
  const originalPrefetch = App.prefetch;

  App.prefetch = async context => {
    const originResult = await (originalPrefetch === null || originalPrefetch === void 0 ? void 0 : originalPrefetch(context));
    const result = await (prefetch === null || prefetch === void 0 ? void 0 : prefetch(context));
    return _objectSpread(_objectSpread({}, originResult), result);
  };
};

exports.registerPrefetch = registerPrefetch;
const runtime = createRuntime();
exports.runtime = runtime;
const {
  createPlugin
} = runtime;
exports.createPlugin = createPlugin;