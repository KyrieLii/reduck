/// <reference types="node" />
import { IncomingMessage, ServerResponse, Server } from 'http';
import { Adapter, APIServerStartInput } from '@modern-js/server-core';
import type { NormalizedConfig } from '@modern-js/core';
import { ModernServerOptions, NextFunction, ServerHookRunner, Metrics, Logger, ModernServerInterface, HookNames, BuildOptions } from '../type';
import { RouteMatchManager, ModernRouteInterface, ModernRoute } from '../libs/route';
import { mergeExtension } from '../utils';
import * as reader from '../libs/render/reader';
import { ModernServerContext } from '../libs/context';
import { ApiServerMode } from '../constants';
declare type ModernServerHandler = (context: ModernServerContext, next: NextFunction) => Promise<void> | void;
declare type ModernServerAsyncHandler = (context: ModernServerContext, next: NextFunction) => Promise<void>;
export declare class ModernServer implements ModernServerInterface {
  pwd: string;
  distDir: string;
  protected workDir: string;
  protected router: RouteMatchManager;
  protected conf: NormalizedConfig;
  protected handlers: ModernServerAsyncHandler[];
  protected presetRoutes?: ModernRouteInterface[];
  protected runner: ServerHookRunner;
  protected readonly logger: Logger;
  protected readonly metrics: Metrics;
  protected readonly runMode: string;
  protected reader: typeof reader;
  protected readonly proxyTarget: ModernServerOptions['proxyTarget'];
  private staticFileHandler;
  private routeRenderHandler;
  private frameWebHandler;
  private frameAPIHandler;
  private proxyHandler;
  private _handler;
  private readonly staticGenerate;
  constructor({
    pwd,
    config,
    routes,
    staticGenerate,
    logger,
    metrics,
    runMode,
    proxyTarget
  }: ModernServerOptions);
  onInit(runner: ServerHookRunner): Promise<void>;
  onClose(): Promise<void>;
  onRepack(_: BuildOptions): void;
  onListening(_: Server): void;
  protected onServerChange(_: Record<string, any>): void;
  getRequestHandler(): (req: IncomingMessage, res: ServerResponse, next?: () => void) => void | ServerResponse;
  createHTTPServer(handler: (req: IncomingMessage, res: ServerResponse, next?: () => void) => void): Promise<Server>;
  protected getRoutes(): ModernRouteInterface[];
  protected addHandler(handler: ModernServerHandler): void;
  protected render404(context: ModernServerContext): void;
  protected prepareFrameHandler(): Promise<void>;
  protected prepareWebHandler(extension: ReturnType<typeof mergeExtension>): Promise<Adapter>;
  protected prepareAPIHandler(mode: ApiServerMode, extension: APIServerStartInput['config']): Promise<Adapter>;
  protected filterRoutes(routes: ModernRouteInterface[]): ModernRouteInterface[];
  protected emitRouteHook(eventName: HookNames, input: {
    context: ModernServerContext;
    [propsName: string]: any;
  }): Promise<any>;
  protected setupBeforeProdMiddleware(): Promise<void>;
  protected handleAPI(context: ModernServerContext): Promise<void>;
  protected handleWeb(context: ModernServerContext, route: ModernRoute): Promise<import("../type").RenderResult | null>;
  protected proxy(): Promise<any>;
  protected warmupSSRBundle(): void;
  private routeHandler;
  private injectMicroFE;
  private compose;
  private requestHandler;
  private onError;
  private renderErrorPage;
}
export {};