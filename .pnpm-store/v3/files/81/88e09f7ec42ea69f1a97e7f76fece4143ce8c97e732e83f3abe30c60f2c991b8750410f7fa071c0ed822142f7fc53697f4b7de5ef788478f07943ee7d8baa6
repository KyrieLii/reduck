"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watch = exports.ChangeType = void 0;

var path = _interopRequireWildcard(require("path"));

var _utils = require("@modern-js/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ChangeType = {
  ADD: 'add',
  UNLINK: 'unlink',
  CHANGE: 'change'
};
exports.ChangeType = ChangeType;

const watch = (watchDir, runTask, ignored = []) => {
  let ready = false;

  const watcher = _utils.chokidar.watch(`${watchDir}/**/*.{css,less,sass,scss}`, {
    ignored
  });

  watcher.on('ready', () => ready = true);
  watcher.on('change', async filePath => {
    const changedFilePath = path.resolve(filePath);
    await runTask({
      changedFilePath,
      changeType: ChangeType.CHANGE
    });
  });
  watcher.on('add', async filePath => {
    const changedFilePath = path.resolve(filePath);

    if (ready) {
      await runTask({
        changedFilePath,
        changeType: ChangeType.ADD
      });
    }
  });
  watcher.on('unlink', async filePath => {
    const changedFilePath = path.resolve(filePath);
    await runTask({
      changedFilePath,
      changeType: ChangeType.UNLINK
    });
  });
  watcher.on('error', err => {
    throw err;
  });
};

exports.watch = watch;