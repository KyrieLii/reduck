function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createStore, model } from '..';
const count1Model = model('count1').define({
  state: {
    value: 1
  },
  actions: {
    add(state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        value: state.value + 1
      });
    }

  }
});
const count2Model = model('count2').define({
  state: {
    value: 1
  },
  actions: {
    add1(state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        value: state.value + 1
      });
    }

  }
});
describe('test subscribe', () => {
  test('subsribe should works for simple model', () => {
    const store = createStore();
    const [, actions, subscribe] = store.use(count1Model);
    const fn = jest.fn();
    subscribe(() => {
      fn();
    });
    actions.add();
    expect(fn).toBeCalledTimes(1);
  });
  test('subscribe should works for multiple model', () => {
    const store = createStore();
    const [, actions, subscribe] = store.use([count1Model, count2Model]);
    const fn = jest.fn();
    subscribe(() => {
      fn();
    });
    actions.add();
    expect(fn).toBeCalledTimes(1);
    expect(store.getState()).toEqual({
      count1: {
        value: 2
      },
      count2: {
        value: 1
      }
    });
    actions.add1();
    expect(fn).toBeCalledTimes(2);
    expect(store.getState()).toEqual({
      count1: {
        value: 2
      },
      count2: {
        value: 2
      }
    });
  });
  test('unsubsribe should works', () => {
    const store = createStore();
    const [, actions, subscribe] = store.use(count1Model);
    const fn = jest.fn();
    const unsubsribe = subscribe(() => {
      fn();
    });
    actions.add();
    expect(fn).toBeCalledTimes(1);
    unsubsribe();
    expect(fn).toBeCalledTimes(1);
  });
});