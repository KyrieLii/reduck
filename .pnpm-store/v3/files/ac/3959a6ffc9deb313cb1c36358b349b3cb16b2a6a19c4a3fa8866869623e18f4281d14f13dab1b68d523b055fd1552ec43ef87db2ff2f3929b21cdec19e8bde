function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import path from 'path';
import { getAllAPIFiles, getMethod, getLambdaDir, extractModuleInfoFromFilenames } from '@modern-js/bff-utils';
import { chalk } from '@modern-js/utils';
export const getAllAPIInfos = (appDir, prefix = '/api') => {
  const lambdaDir = getLambdaDir(path.join(appDir, './api'));
  const filenames = getAllAPIFiles(lambdaDir);
  const moduleInfos = extractModuleInfoFromFilenames(lambdaDir, filenames);
  const apiInfos = [];
  moduleInfos.forEach(({
    name,
    module,
    filename
  }) => {
    Object.keys(module).forEach(key => {
      const handler = module[key];
      const method = getMethod(key);

      if (typeof handler === 'function') {
        apiInfos.push({
          handler,
          method,
          name: key,
          routePath: `${prefix}${name}`,
          apiFile: filename
        });
      }
    });
  });
  return apiInfos;
};
export const isBFFProject = pwd => {
  try {
    // eslint-disable-next-line import/no-dynamic-require,@typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires
    const packageJson = require(path.join(pwd, './package.json'));

    const {
      dependencies,
      devDependencies
    } = packageJson;
    const isBFF = Object.keys(_objectSpread(_objectSpread({}, dependencies), devDependencies)).some(dependency => dependency.includes('plugin-bff'));
    const isMWA = Object.keys(devDependencies).some(devDependency => devDependency.includes('app-tools'));
    return isMWA && isBFF;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.log(chalk.red(error));
    return false;
  }
};