"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPort = void 0;
const net_1 = __importDefault(require("net"));
const compiled_1 = require("./compiled");
const logger_1 = require("./logger");
/**
 * Get available free port.
 * @param port - Current port want to use.
 * @param tryLimits - Maximum number of retries.
 * @returns Available port number.
 */
/* eslint-disable no-param-reassign, @typescript-eslint/no-loop-func */
const getPort = async (port, tryLimits = 20) => {
    if (typeof port === 'string') {
        port = parseInt(port, 10);
    }
    const original = port;
    let found = false;
    let attempts = 0;
    while (!found && attempts <= tryLimits) {
        try {
            await new Promise((resolve, reject) => {
                const server = net_1.default.createServer();
                server.unref();
                server.on('error', reject);
                server.listen({
                    port,
                    host: '0.0.0.0',
                }, () => {
                    found = true;
                    server.close(resolve);
                });
            });
        }
        catch (e) {
            if (e.code !== 'EADDRINUSE') {
                throw e;
            }
            port++;
            attempts++;
        }
    }
    if (port !== original) {
        logger_1.logger.info(compiled_1.chalk.red(`Something is already running on port ${original}. ${compiled_1.chalk.yellow(`Use port ${port} instead.`)}`));
    }
    return port;
};
exports.getPort = getPort;
/* eslint-enable no-param-reassign, @typescript-eslint/no-loop-func */
