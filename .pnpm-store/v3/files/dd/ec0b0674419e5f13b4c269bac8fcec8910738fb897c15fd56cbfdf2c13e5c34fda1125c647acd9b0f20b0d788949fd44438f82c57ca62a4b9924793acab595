"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompilerErrorResult = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CompilerErrorResult {
  constructor(initErrorResult) {
    _defineProperty(this, "_messageDetails", void 0);

    this.init(initErrorResult);
  }

  init(initErrorResult) {
    this._messageDetails = (initErrorResult === null || initErrorResult === void 0 ? void 0 : initErrorResult.messageDetails) || [];
  }

  update(messageDetails) {
    for (const messageDetail of messageDetails) {
      // 遍历存不存在该文件报错信息，不存在则增加，否则更新内容
      const addError = !this._messageDetails.some(detail => {
        if (detail.filename === messageDetail.filename) {
          // 如果错误栈里存在该文件报错信息，则更新内容
          detail.content = messageDetail.content;
          return true;
        }

        return false;
      });

      if (addError) {
        this._messageDetails.push(messageDetail);
      }
    }
  }

  removeByFileName(filename) {
    this._messageDetails = this._messageDetails.filter(detail => detail.filename !== filename);
  }

  get value() {
    var _this$_messageDetails;

    return {
      code: 1,
      message: `Compilation failure ${(_this$_messageDetails = this._messageDetails) === null || _this$_messageDetails === void 0 ? void 0 : _this$_messageDetails.length} files with Babel.`,
      messageDetails: this._messageDetails
    };
  }

  checkExistError() {
    return this._messageDetails.length > 0;
  }

}

exports.CompilerErrorResult = CompilerErrorResult;