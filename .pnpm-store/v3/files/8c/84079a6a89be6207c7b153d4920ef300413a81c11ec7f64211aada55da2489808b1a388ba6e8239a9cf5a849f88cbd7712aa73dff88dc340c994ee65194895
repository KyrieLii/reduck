function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Webpack from 'webpack';
import { DEFAULT_DEV_OPTIONS } from "../constants";
const {
  EntryPlugin
} = Webpack;
export default class DevServerPlugin {
  constructor(options) {
    _defineProperty(this, "options", void 0);

    this.options = options;
  }

  apply(compiler) {
    const {
      options
    } = this;

    const client = _objectSpread(_objectSpread({}, DEFAULT_DEV_OPTIONS.client), options.client);

    const host = `&host=${client.host}`;
    const path = `&path=${client.path}`;
    const port = `&port=${client.port}`;
    const clientEntry = `${require.resolve('@modern-js/hmr-client')}?${host}${path}${port}`;
    const additionalEntries = [clientEntry]; // use a hook to add entries if available

    for (const additionalEntry of additionalEntries) {
      new EntryPlugin(compiler.context, additionalEntry, {
        name: undefined
      }).apply(compiler);
    } // Todo remove, client must inject.


    const compilerOptions = compiler.options;
    compilerOptions.plugins = compilerOptions.plugins || [];

    if (!compilerOptions.plugins.find(p => p.constructor === Webpack.HotModuleReplacementPlugin)) {
      // apply the HMR plugin, if it didn't exist before.
      const plugin = new Webpack.HotModuleReplacementPlugin();
      plugin.apply(compiler);
    }
  }

}