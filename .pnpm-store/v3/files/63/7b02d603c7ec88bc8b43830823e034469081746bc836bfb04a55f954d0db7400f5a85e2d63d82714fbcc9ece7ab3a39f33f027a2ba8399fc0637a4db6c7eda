function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { fs } from '@modern-js/utils';
import { cssResolve } from "./resolves/css";
import { lessResolve } from "./resolves/less";
import { sassResolve } from "./resolves/sass";
import { isCssRule, isLessRule, isSassRule } from "./utils/cssRule";
import { generateOutputFile } from "./resolves/utils";
export async function resolveFiles(params) {
  const {
    files,
    enableVirtualDist
  } = params;
  const results = [];

  for (const file of files) {
    let result;

    if (isLessRule(file)) {
      result = await lessResolve(_objectSpread({
        file
      }, params));
    } else if (isSassRule(file)) {
      result = await sassResolve(_objectSpread({
        file
      }, params));
    } else if (isCssRule(file)) {
      result = await cssResolve(_objectSpread({
        file
      }, params));
    } else {
      // 如果是不识别的文件，则不做任何处理
      result = {
        code: 0,
        filename: file,
        content: fs.readFileSync(file, 'utf-8'),
        error: null
      };
    }

    results.push(result);

    if (!enableVirtualDist && result.code === 0) {
      generateOutputFile(result.filename, result.content, params);
    }
  }

  if (enableVirtualDist) {
    return {
      code: results.some(result => result.code === 1) ? 1 : 0,
      dists: results.filter(result => result.code === 0),
      errors: results.filter(result => result.code === 1)
    };
  }

  return undefined;
}