import path from 'path';
import { isProjectFile } from "./utils";

const isStylesDirFile = (appDirectory, currentFilePath, importPath) => {
  if (!currentFilePath) {
    return false;
  }

  const importFileAbsPath = path.join(path.dirname(currentFilePath), importPath);
  const stylesAbsPath = path.resolve(appDirectory, 'styles');
  return importFileAbsPath.includes(stylesAbsPath);
};

const checkIsOutsideSrc = (filename, importName, srcDir) => {
  if (!filename || filename.includes('node_modules/.block-tools/source')) {
    return false;
  }

  const currentFileDir = path.dirname(filename);
  const importFileAbsPath = path.resolve(currentFileDir, importName);
  return path.relative(srcDir, importFileAbsPath).includes('..');
};

export const importCheck = () => ({
  name: 'import-check',
  visitor: {
    Program(nodePath, {
      opts,
      file
    }) {
      nodePath.traverse({
        ImportDeclaration(innerPath) {
          const {
            source
          } = innerPath.node;
          const {
            appDirectory
          } = opts;
          const {
            filename
          } = file.opts;
          const srcDir = `${appDirectory}/src`;
          const importName = source !== null && source !== void 0 && source.value ? source.value : undefined;

          if (typeof importName !== 'string') {
            innerPath.skip();
          }

          if (!isProjectFile(importName)) {
            innerPath.skip();
          }

          if (isStylesDirFile(appDirectory, filename, importName)) {
            throw new Error(`Importing files in 'styles' directory is not allowed: '${importName}', You can place the file in the 'src' directory or remove the imported code`);
          }

          if (checkIsOutsideSrc(filename, importName, srcDir)) {
            throw new Error(`Importing files outside of 'src' directory is not allowed: '${importName}, You can place the file in the 'src' directory and modify the imported code'`);
          }
        }

      });
    }

  }
});
export default importCheck;