import { Container } from '../farrow-pipeline';
import type { Hook, CommonAPI, ToRunners, ToThreads, InitOptions, PluginOptions } from './types';
/** Setup function of sync plugin. */

export declare type Setup<Hooks, API = Record<string, never>> = (api: API) => Partial<ToThreads<Hooks>> | void;
declare const SYNC_PLUGIN_SYMBOL = "SYNC_PLUGIN_SYMBOL";
export declare type Plugin<Hooks, API> = {
  SYNC_PLUGIN_SYMBOL: typeof SYNC_PLUGIN_SYMBOL;
} & Required<PluginOptions<Hooks, Setup<Hooks, API>>>;
export declare type PluginFromManager<M extends Manager<any, any>> = M extends Manager<infer Hooks, infer API> ? Plugin<Hooks, API> : never;
export declare type Manager<Hooks, API> = {
  /**
   * Create a sync plugin.
   * @param setup the setup function.
   * @param options optional plugin options.
   */
  createPlugin: (setup?: Setup<Hooks, API>, options?: PluginOptions<Hooks, Setup<Hooks, API>>) => Plugin<Hooks, API>;
  /**
   * Determine if a value is a sync plugin.
   * @param input
   */

  isPlugin: (input: unknown) => input is Plugin<Hooks, API>;
  /**
   * Register new plugins to current manager.
   * @param plugins one or more plugin.
   */

  usePlugin: (...plugins: Array<Plugin<Hooks, API> | PluginOptions<Hooks, Setup<Hooks, API>> | (() => PluginOptions<Hooks, Setup<Hooks, API>>)>) => Manager<Hooks, API>;
  /**
   * Init manager, it will call the setup function of all registered plugins.
   * @param options passing a custom container.
   */

  init: (options?: InitOptions) => ToRunners<Hooks>;
  /**
   * Run callback function with current container.
   * @param callback
   * @param options passing a custom container.
   */

  run: <O>(cb: () => O, options?: InitOptions) => O;
  /**
   * Register new hooks.
   * @param newHooks
   */

  registerHook: (hewHooks: Partial<Hooks>) => void;
  /**
   * Clear all registered plugins.
   */

  clear: () => void;
  /**
   * Return a cloned manager.
   * @param overrideAPI override the default plugin API.
   */

  clone: (overrideAPI?: Partial<API & CommonAPI<Hooks>>) => Manager<Hooks, API>;
  /**
   * Get all runner functions of the hooks.
   */

  useRunner: () => ToRunners<Hooks>;
};
export declare const DEFAULT_OPTIONS: {
  name: string;
  pre: never[];
  post: never[];
  rivals: never[];
  required: never[];
  usePlugins: never[];
  registerHook: {};
};
export declare const createManager: <Hooks, API extends Record<string, any> = Record<string, never>>(hooks?: Partial<Hooks> | undefined, api?: API | undefined) => Manager<Hooks, API>;
export declare const generateRunner: <Hooks extends Record<string, any>>(hooksList: (void | Partial<ToThreads<Hooks>>)[], container: Container, hooksMap?: Hooks | undefined) => ToRunners<Hooks>;
export declare const cloneHook: (hook: Hook) => Hook;
export declare const closeHooksMap: <Hooks>(record: Hooks) => Hooks;
export declare const isObject: (obj: unknown) => obj is Record<string, any>;
export declare const hasOwnProperty: <X extends Record<string, unknown>, Y extends PropertyKey>(obj: X, prop: Y) => obj is X & Record<Y, unknown>;
export {};