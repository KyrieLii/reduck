"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = exports.WatchChangeType = void 0;
const path = __importStar(require("path"));
const compiled_1 = require("./compiled");
exports.WatchChangeType = {
    ADD: 'add',
    UNLINK: 'unlink',
    CHANGE: 'change',
};
const watch = (watchDir, runTask, ignored = []) => {
    let ready = false;
    const watcher = compiled_1.chokidar.watch(watchDir, {
        ignored,
    });
    watcher.on('ready', () => (ready = true));
    watcher.on('change', async (filePath) => {
        const changedFilePath = path.resolve(filePath);
        await runTask({ changedFilePath, changeType: exports.WatchChangeType.CHANGE });
    });
    watcher.on('add', async (filePath) => {
        const changedFilePath = path.resolve(filePath);
        if (ready) {
            await runTask({ changedFilePath, changeType: exports.WatchChangeType.ADD });
        }
    });
    watcher.on('unlink', async (filePath) => {
        const changedFilePath = path.resolve(filePath);
        await runTask({ changedFilePath, changeType: exports.WatchChangeType.UNLINK });
    });
    watcher.on('error', err => {
        throw err;
    });
    return watcher;
};
exports.watch = watch;
