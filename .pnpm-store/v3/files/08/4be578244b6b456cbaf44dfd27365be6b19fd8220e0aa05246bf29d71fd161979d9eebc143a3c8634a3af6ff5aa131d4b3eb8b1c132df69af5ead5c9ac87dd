import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import path from 'path';
import fs from 'fs';
import { renderToStaticMarkup } from 'react-dom/server';
import { run } from '@modern-js/utils/ssr';
import { LOADABLE_STATS_FILE } from '@modern-js/utils/constants';
import { ChunkExtractor } from '@loadable/server'; // todo: SSRContext

import { jsx as _jsx } from "react/jsx-runtime";

var prefetch = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(App, context) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", run(context.ssrContext.request.headers, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
              var _context$store;

              var ssrContext, loadablefile, extractor, loadersData;
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      ssrContext = context.ssrContext;
                      loadablefile = path.resolve(ssrContext.distDir, LOADABLE_STATS_FILE);

                      if (fs.existsSync(loadablefile)) {
                        extractor = new ChunkExtractor({
                          statsFile: path.resolve(ssrContext.distDir, LOADABLE_STATS_FILE),
                          entrypoints: [ssrContext.entryName].filter(Boolean)
                        });
                        renderToStaticMarkup(extractor.collectChunks( /*#__PURE__*/_jsx(App, {
                          context: context
                        })));
                      } else {
                        renderToStaticMarkup( /*#__PURE__*/_jsx(App, {
                          context: context
                        }));
                      }

                      if (context.loaderManager.hasPendingLoaders()) {
                        _context.next = 5;
                        break;
                      }

                      return _context.abrupt("return", {
                        i18nData: context.__i18nData__
                      });

                    case 5:
                      _context.next = 7;
                      return context.loaderManager.awaitPendingLoaders();

                    case 7:
                      loadersData = _context.sent;
                      Object.keys(loadersData).forEach(function (id) {
                        var data = loadersData[id];

                        if (data._error) {
                          ssrContext.logger.error('App Prefetch Loader', data._error);
                          ssrContext.metrics.emitCounter('app.prefetch.loader.error', 1);
                          delete data._error;
                        }
                      });
                      return _context.abrupt("return", {
                        loadersData: loadersData,
                        i18nData: context.__i18nData__,
                        // todo: move to plugin state
                        storeState: context === null || context === void 0 ? void 0 : (_context$store = context.store) === null || _context$store === void 0 ? void 0 : _context$store.getState()
                      });

                    case 10:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function prefetch(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

export default prefetch;