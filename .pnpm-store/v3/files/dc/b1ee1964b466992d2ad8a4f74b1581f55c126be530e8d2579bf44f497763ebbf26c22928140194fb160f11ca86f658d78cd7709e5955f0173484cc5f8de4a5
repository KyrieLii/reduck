import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import path from 'path';
import { registerPrefetch } from '@modern-js/runtime-core';
import prefetch from "./prefetch";
import { formatServer } from "./utils";
var registeredApps = new WeakSet();

var plugin = function plugin() {
  return {
    name: '@modern-js/plugin-ssr',
    setup: function setup() {
      return {
        server: function () {
          var _server = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
            var App, context, html;
            return _regeneratorRuntime.wrap(function _callee$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    App = _ref.App, context = _ref.context;

                    if (!registeredApps.has(App)) {
                      registerPrefetch(App, function (_context) {
                        return prefetch(App, _context);
                      });
                      registeredApps.add(App);
                    }

                    if (!(typeof window === 'undefined')) {
                      _context2.next = 7;
                      break;
                    }

                    _context2.next = 5;
                    return require("./serverRender").render(context, (context === null || context === void 0 ? void 0 : context.ssrContext.distDir) || path.join(process.cwd(), 'dist'), App);

                  case 5:
                    html = _context2.sent;
                    return _context2.abrupt("return", html);

                  case 7:
                    return _context2.abrupt("return", null);

                  case 8:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee);
          }));

          function server(_x) {
            return _server.apply(this, arguments);
          }

          return server;
        }(),
        init: function init(_ref2, next) {
          var context = _ref2.context;
          var request = context.ssrContext.request;
          context.ssrContext.request = formatServer(request);
          return next({
            context: context
          });
        },
        pickContext: function pickContext(_ref3, next) {
          var context = _ref3.context,
              pickedContext = _ref3.pickedContext;

          var _context$ssrContext = context === null || context === void 0 ? void 0 : context.ssrContext,
              request = _context$ssrContext.request;

          return next({
            context: context,
            pickedContext: _objectSpread(_objectSpread({}, pickedContext), {}, {
              request: request
            })
          });
        }
      };
    }
  };
};

export default plugin;
export * from "./react";