import _typeof from "@babel/runtime/helpers/esm/typeof";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { createAsyncPipeline } from "../farrow-pipeline";
var ASYNC_WORKFLOW_SYMBOL = Symbol["for"]('MODERN_ASYNC_WORKFLOW');
export var isAsyncWorkflow = function isAsyncWorkflow(input) {
  return Boolean(input === null || input === void 0 ? void 0 : input[ASYNC_WORKFLOW_SYMBOL]);
};
export var createAsyncWorkflow = function createAsyncWorkflow() {
  var pipeline = createAsyncPipeline();

  var use = function use() {
    for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {
      input[_key] = arguments[_key];
    }

    pipeline.use.apply(pipeline, _toConsumableArray(input.map(mapAsyncWorkerToAsyncMiddleware)));
    return workflow;
  };

  var run = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, options) {
      var result;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              result = pipeline.run(input, _objectSpread(_objectSpread({}, options), {}, {
                onLast: function onLast() {
                  return [];
                }
              }));

              if (!isPromise(result)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", result.then(function (result) {
                return result.filter(Boolean);
              }));

            case 5:
              return _context.abrupt("return", result.filter(Boolean));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function run(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var workflow = _objectSpread(_objectSpread({}, pipeline), {}, _defineProperty({
    use: use,
    run: run
  }, ASYNC_WORKFLOW_SYMBOL, true));

  return workflow;
};

var mapAsyncWorkerToAsyncMiddleware = function mapAsyncWorkerToAsyncMiddleware(worker) {
  return /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, next) {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return worker(input);

            case 2:
              _context2.t1 = _context2.sent;
              _context2.t0 = [_context2.t1];
              _context2.t2 = _toConsumableArray;
              _context2.next = 7;
              return next(input);

            case 7:
              _context2.t3 = _context2.sent;
              _context2.t4 = (0, _context2.t2)(_context2.t3);
              return _context2.abrupt("return", _context2.t0.concat.call(_context2.t0, _context2.t4));

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
};

function isPromise(obj) {
  return Boolean(obj) && (_typeof(obj) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}