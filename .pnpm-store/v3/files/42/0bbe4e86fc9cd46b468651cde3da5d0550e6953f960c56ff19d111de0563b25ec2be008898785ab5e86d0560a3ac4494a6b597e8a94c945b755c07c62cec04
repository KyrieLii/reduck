"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFastRefresh = exports.isUseSSRBundle = exports.isSSR = exports.isEmpty = exports.isTypescript = exports.isDepExists = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const node_env_1 = require("./node-env");
/**
 * Check if the package name is in dependencies or devDependencies.
 *
 * @param appDirectory - Project root directory.
 * @param name - Package name.
 * @returns True if the name is in dependencies or devDependencies, false otherwise.
 */
const isDepExists = (appDirectory, name) => {
    const json = require(path_1.default.resolve(appDirectory, './package.json'));
    const { dependencies = {}, devDependencies = {} } = json;
    return (dependencies.hasOwnProperty(name) || devDependencies.hasOwnProperty(name));
};
exports.isDepExists = isDepExists;
/**
 * Is typescript project.
 *
 * @param root - App directory.
 * @returns Whether to use typescript.
 */
const isTypescript = (root) => fs_1.default.existsSync(path_1.default.resolve(root, './tsconfig.json'));
exports.isTypescript = isTypescript;
/**
 * Is Empty object
 *
 * @param o - Any object.
 * @returns Whether it is empty object.
 */
const isEmpty = (o) => Object.entries(o).length === 0 && o.constructor === Object;
exports.isEmpty = isEmpty;
/**
 * Is SSR project
 *
 * @param config - User config.
 * @returns Whether to use server side render.
 */
const isSSR = (config) => {
    const { server } = config;
    if (server === null || server === void 0 ? void 0 : server.ssr) {
        return true;
    }
    if ((server === null || server === void 0 ? void 0 : server.ssrByEntries) && !(0, exports.isEmpty)(server.ssrByEntries)) {
        for (const name of Object.keys(server.ssrByEntries)) {
            if (server.ssrByEntries[name]) {
                return true;
            }
        }
    }
    return false;
};
exports.isSSR = isSSR;
const isUseSSRBundle = (config) => {
    const { output } = config;
    if (output === null || output === void 0 ? void 0 : output.ssg) {
        return true;
    }
    return (0, exports.isSSR)(config);
};
exports.isUseSSRBundle = isUseSSRBundle;
const isFastRefresh = () => (0, node_env_1.isDev)() && process.env.FAST_REFRESH !== 'false';
exports.isFastRefresh = isFastRefresh;
__exportStar(require("./node-env"), exports);
__exportStar(require("./platform"), exports);
__exportStar(require("./type"), exports);
