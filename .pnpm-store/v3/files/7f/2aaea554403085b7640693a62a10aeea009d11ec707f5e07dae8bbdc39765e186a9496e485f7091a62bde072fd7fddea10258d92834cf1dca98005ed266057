import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import path from 'path';
import { PLUGIN_SCHEMAS, createRuntimeExportsUtils, isApiOnly } from '@modern-js/utils';
import { testingHooks, getModuleNameMapper, DEFAULT_RESOLVER_PATH } from '@modern-js/testing';
import { getWebpackConfig, WebpackConfigTarget } from '@modern-js/webpack';
import TestingBffPlugin from '@modern-js/testing-plugin-bff';
import { MODERNJS_CONFIG_KEY } from "../constant";
import test from "./test";
export var mergeUserJestConfig = function mergeUserJestConfig(testUtils) {
  var resolveJestConfig = testUtils.testConfig.jest; // resolveJestConfig 如果是函数类型，在所有测试插件 jestConfig 都执行后，再执行生成最终配置

  if (resolveJestConfig && typeof resolveJestConfig !== 'function') {
    testUtils.mergeJestConfig(resolveJestConfig);
  }
};
export default (function () {
  var BffPlugin = TestingBffPlugin();
  return {
    name: '@modern-js/plugin-testing',
    usePlugins: [BffPlugin],
    post: [BffPlugin.name],
    registerHook: testingHooks,
    setup: function setup(api) {
      var testingExportsUtils;
      return {
        commands: function commands(_ref) {
          var program = _ref.program;
          program.command('test').allowUnknownOption().usage('<regexForTestFiles> --[options]').action( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return test(api);

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));
        },
        validateSchema: function validateSchema() {
          return PLUGIN_SCHEMAS['@modern-js/plugin-testing'];
        },
        config: function config() {
          var appContext = api.useAppContext();
          testingExportsUtils = createRuntimeExportsUtils(appContext.internalDirectory, 'testing');
          return {
            source: {
              alias: {
                '@modern-js/runtime/testing': testingExportsUtils.getPath()
              }
            }
          };
        },
        addRuntimeExports: function addRuntimeExports() {
          var testingPath = path.resolve(__dirname, '../');
          testingExportsUtils.addExport("export * from '".concat(testingPath, "'"));
        },
        jestConfig: function () {
          var _jestConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(utils, next) {
            var appContext, userConfig, apiOnly, webpackConfig, _webpackConfig$resolv, alias;

            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    appContext = api.useAppContext();
                    userConfig = api.useResolvedConfigContext();
                    _context2.next = 4;
                    return isApiOnly(appContext.appDirectory);

                  case 4:
                    apiOnly = _context2.sent;

                    if (!apiOnly) {
                      _context2.next = 7;
                      break;
                    }

                    return _context2.abrupt("return", next(utils));

                  case 7:
                    webpackConfig = getWebpackConfig(WebpackConfigTarget.CLIENT, appContext, userConfig);
                    _webpackConfig$resolv = webpackConfig.resolve.alias, alias = _webpackConfig$resolv === void 0 ? {} : _webpackConfig$resolv;
                    utils.mergeJestConfig({
                      globals: _defineProperty({}, MODERNJS_CONFIG_KEY, userConfig),
                      moduleNameMapper: getModuleNameMapper(alias),
                      testEnvironment: 'jsdom',
                      resolver: DEFAULT_RESOLVER_PATH,
                      rootDir: appContext.appDirectory || process.cwd(),
                      // todo: diffrernt test root for diffrent solutions
                      // testMatch: [`<rootDir>/(src|tests|electron)/**/*.test.[jt]s?(x)`],
                      // testMatch bug on windows, issue: https://github.com/facebook/jest/issues/7914
                      testMatch: ["<rootDir>/src/**/*.test.[jt]s?(x)", "<rootDir>/tests/**/*.test.[jt]s?(x)", "<rootDir>/electron/**/*.test.[jt]s?(x)"]
                    });
                    mergeUserJestConfig(utils);
                    return _context2.abrupt("return", next(utils));

                  case 12:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function jestConfig(_x, _x2) {
            return _jestConfig.apply(this, arguments);
          }

          return jestConfig;
        }()
      };
    }
  };
});