import type { IAppContext } from '@modern-js/types';
import { UserConfig } from './config';
import { NormalizedConfig } from './config/mergeConfig';
import type { LoadedPlugin } from './loadPlugins';
export type { IAppContext };
export declare const AppContext: import("@modern-js/plugin").Context<IAppContext>;
export declare const ConfigContext: import("@modern-js/plugin").Context<UserConfig>;
export declare const ResolvedConfigContext: import("@modern-js/plugin").Context<NormalizedConfig>;
/**
 * Set app context.
 * @param value new app context. It will override previous app context.
 */
export declare const setAppContext: (value: IAppContext) => void;
/**
 * Get app context, including directories, plugins and some static infos.
 */
export declare const useAppContext: () => IAppContext;
/**
 * Get original content of user config.
 */
export declare const useConfigContext: () => UserConfig;
/**
 * Get normalized content of user config.
 */
export declare const useResolvedConfigContext: () => NormalizedConfig;
export declare const initAppContext: ({ appDirectory, plugins, configFile, options, serverConfigFile, }: {
    appDirectory: string;
    plugins: LoadedPlugin[];
    configFile: string | false;
    options?: {
        metaName?: string | undefined;
        srcDir?: string | undefined;
        distDir?: string | undefined;
        sharedDir?: string | undefined;
    } | undefined;
    serverConfigFile: string;
}) => IAppContext;
