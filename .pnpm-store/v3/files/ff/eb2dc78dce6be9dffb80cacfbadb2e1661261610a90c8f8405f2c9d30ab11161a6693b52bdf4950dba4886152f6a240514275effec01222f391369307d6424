"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMonorepoPackages = exports.findMonorepoRoot = exports.isModernjsMonorepo = exports.isMonorepo = exports.isPnpmWorkspaces = exports.isYarnWorkspaces = exports.isLerna = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const compiled_1 = require("./compiled");
const PACKAGE_MAX_DEPTH = 5;
const WORKSPACE_FILES = {
    YARN: 'package.json',
    PNPM: 'pnpm-workspace.yaml',
    LERNA: 'lerna.json',
};
const isLerna = (root) => fs_1.default.existsSync(path_1.default.join(root, WORKSPACE_FILES.LERNA));
exports.isLerna = isLerna;
const isYarnWorkspaces = (root) => {
    var _a;
    const pkg = path_1.default.join(root, WORKSPACE_FILES.YARN);
    if (!fs_1.default.existsSync(pkg)) {
        return false;
    }
    const json = JSON.parse(fs_1.default.readFileSync(pkg, 'utf8'));
    return Boolean((_a = json.workspaces) === null || _a === void 0 ? void 0 : _a.packages);
};
exports.isYarnWorkspaces = isYarnWorkspaces;
const isPnpmWorkspaces = (root) => fs_1.default.existsSync(path_1.default.join(root, WORKSPACE_FILES.PNPM));
exports.isPnpmWorkspaces = isPnpmWorkspaces;
const isMonorepo = (root) => (0, exports.isLerna)(root) || (0, exports.isYarnWorkspaces)(root) || (0, exports.isPnpmWorkspaces)(root);
exports.isMonorepo = isMonorepo;
const isModernjsMonorepo = (root) => {
    const json = JSON.parse(fs_1.default.readFileSync(path_1.default.join(root, 'package.json'), 'utf8'));
    const deps = {
        ...(json.dependencies || {}),
        ...(json.devDependencies || {}),
    };
    return Boolean(deps['@modern-js/monorepo-tools']);
};
exports.isModernjsMonorepo = isModernjsMonorepo;
const findMonorepoRoot = (appDirectory, maxDepth = PACKAGE_MAX_DEPTH) => {
    let inMonorepo = false;
    for (let depth = 0; depth < maxDepth; depth++) {
        if ((0, exports.isMonorepo)(appDirectory)) {
            inMonorepo = true;
            break;
        }
        // eslint-disable-next-line no-param-reassign
        appDirectory = path_1.default.dirname(appDirectory);
    }
    return inMonorepo ? appDirectory : undefined;
};
exports.findMonorepoRoot = findMonorepoRoot;
const getMonorepoPackages = (root) => {
    let packages = [];
    if ((0, exports.isYarnWorkspaces)(root)) {
        const json = JSON.parse(fs_1.default.readFileSync(path_1.default.join(root, 'package.json'), 'utf8'));
        ({ packages } = json.workspaces);
    }
    else if ((0, exports.isLerna)(root)) {
        const json = JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(root, 'lerna.json'), 'utf8'));
        ({ packages } = json);
    }
    else {
        ({ packages } = compiled_1.yaml.load(fs_1.default.readFileSync(path_1.default.join(root, WORKSPACE_FILES.PNPM), 'utf8')));
    }
    if (packages) {
        return packages
            .map(name => 
        // The trailing / ensures only dirs are picked up
        compiled_1.glob.sync(path_1.default.join(root, `${name}/`), {
            ignore: ['**/node_modules/**'],
        }))
            .reduce((acc, val) => acc.concat(val), [])
            .filter(filepath => fs_1.default.existsSync(path_1.default.resolve(filepath, 'package.json')))
            .map(filepath => ({
            path: filepath,
            name: JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(filepath, 'package.json'), 'utf8')).name,
        }));
    }
    return [];
};
exports.getMonorepoPackages = getMonorepoPackages;
