"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _utils = require("@modern-js/utils");

var _webpackPlugin = _interopRequireDefault(require("@loadable/webpack-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PLUGIN_IDENTIFIER = 'ssr';

var _default = () => ({
  name: '@modern-js/plugin-ssr',
  required: ['@modern-js/runtime'],
  setup: api => {
    const ssrConfigMap = new Map();
    let pluginsExportsUtils;

    const ssrModulePath = _path.default.resolve(__dirname, '../../../../');

    return {
      config() {
        const appContext = api.useAppContext();
        pluginsExportsUtils = (0, _utils.createRuntimeExportsUtils)(appContext.internalDirectory, 'plugins');
        return {
          source: {
            alias: {
              '@modern-js/runtime/plugins': pluginsExportsUtils.getPath()
            }
          },
          tools: {
            webpackChain: (chain, {
              name,
              CHAIN_ID
            }) => {
              const userConfig = api.useResolvedConfigContext();

              if ((0, _utils.isUseSSRBundle)(userConfig) && name !== 'server') {
                chain.plugin(CHAIN_ID.PLUGIN.LOADABLE).use(_webpackPlugin.default, [{
                  filename: _utils.LOADABLE_STATS_FILE
                }]);
              }
            },
            babel: config => {
              const userConfig = api.useResolvedConfigContext();

              if ((0, _utils.isUseSSRBundle)(userConfig)) {
                config.plugins.push(require.resolve('@loadable/babel-plugin'));
              }
            }
          }
        };
      },

      validateSchema() {
        return _utils.PLUGIN_SCHEMAS['@modern-js/plugin-ssr'];
      },

      modifyEntryImports({
        entrypoint,
        imports
      }) {
        const {
          entryName
        } = entrypoint;
        const userConfig = api.useResolvedConfigContext();
        const {
          packageName
        } = api.useAppContext();
        pluginsExportsUtils.addExport(`export { default as ssr } from '${ssrModulePath}'`); // if use ssg then set ssr config to true

        const ssrConfig = Boolean(userConfig.output.ssg) || (0, _utils.getEntryOptions)(entryName, userConfig.server.ssr, userConfig.server.ssrByEntries, packageName);
        ssrConfigMap.set(entryName, ssrConfig);

        if (ssrConfig) {
          imports.push({
            value: '@modern-js/runtime/plugins',
            specifiers: [{
              imported: PLUGIN_IDENTIFIER
            }]
          });
        }

        return {
          entrypoint,
          imports
        };
      },

      modifyEntryRuntimePlugins({
        entrypoint,
        plugins
      }) {
        if (ssrConfigMap.get(entrypoint.entryName)) {
          plugins.push({
            name: PLUGIN_IDENTIFIER,
            options: ssrConfigMap.get(entrypoint.entryName)
          });
        }

        return {
          entrypoint,
          plugins
        };
      },

      modifyEntryExport({
        entrypoint,
        exportStatement
      }) {
        if (ssrConfigMap.get(entrypoint.entryName)) {
          return {
            entrypoint,
            exportStatement: [`export function ${_utils.SERVER_RENDER_FUNCTION_NAME}(context) {
              return bootstrap(AppWrapper, context)
            }`, exportStatement].join('\n')
          };
        }

        return {
          entrypoint,
          exportStatement
        };
      }

    };
  }
});

exports.default = _default;