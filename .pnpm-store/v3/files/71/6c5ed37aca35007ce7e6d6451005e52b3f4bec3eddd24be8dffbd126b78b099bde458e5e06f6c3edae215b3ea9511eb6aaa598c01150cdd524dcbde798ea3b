function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createStore, model } from '@modern-js-reduck/store';
import logger from 'redux-logger';
import { plugin } from '..';
var todoModel = model('todo').define(function (_, _ref) {
  var use = _ref.use;
  return {
    state: {
      items: []
    },
    actions: {
      load: {
        fulfilled: function fulfilled(state, payload) {
          return _objectSpread(_objectSpread({}, state), {}, {
            items: payload
          });
        }
      },
      loadWithParams: {
        fulfilled: function fulfilled(state, payload) {
          return _objectSpread(_objectSpread({}, state), {}, {
            items: payload
          });
        }
      }
    },
    effects: {
      load: function load() {
        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", Promise.resolve(['1']));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      loadWithParams: function loadWithParams(a) {
        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", Promise.resolve([a]));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      },
      loadThunk: function loadThunk() {
        var actions = use(todoModel)[1];
        return function () {
          actions.load.fulfilled(['2']);
        };
      }
    }
  };
});
describe('reduck effects plugin', function () {
  test('promise middleware', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var store, _store$use, _store$use2, actions;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            store = createStore({
              plugins: [plugin],
              middlewares: [logger]
            });
            _store$use = store.use(todoModel), _store$use2 = _slicedToArray(_store$use, 2), actions = _store$use2[1];
            _context3.next = 4;
            return actions.load();

          case 4:
            expect(store.use(todoModel)[0]).toEqual({
              items: ['1']
            });

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  test('promise middleware params', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var store, _store$use3, _store$use4, actions;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            store = createStore({
              plugins: [plugin],
              middlewares: [logger]
            });
            _store$use3 = store.use(todoModel), _store$use4 = _slicedToArray(_store$use3, 2), actions = _store$use4[1];
            _context4.next = 4;
            return actions.loadWithParams('dddd');

          case 4:
            expect(store.use(todoModel)[0]).toEqual({
              items: ['dddd']
            });

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  test('thunk middleware', function () {
    var store = createStore({
      plugins: [plugin],
      middlewares: [logger]
    });

    var _store$use5 = store.use(todoModel),
        _store$use6 = _slicedToArray(_store$use5, 2),
        actions = _store$use6[1];

    actions.loadThunk();
    expect(store.use(todoModel)[0]).toEqual({
      items: ['2']
    });
  });
});