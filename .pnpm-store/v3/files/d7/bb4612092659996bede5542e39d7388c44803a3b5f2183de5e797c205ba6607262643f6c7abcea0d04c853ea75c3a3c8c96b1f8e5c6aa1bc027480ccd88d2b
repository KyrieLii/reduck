import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import path from 'path';
import { LOADABLE_STATS_FILE } from '@modern-js/utils/constants';
import React from 'react';
import ReactDomServer from 'react-dom/server';
import serialize from 'serialize-javascript';
import ReactHelmet from 'react-helmet';
import { toFragments } from "./template";
import { RenderLevel } from "./type";
import helmetReplace from "./helmet";
import { reduce } from "./reduce";
import * as loadableRenderer from "./loadable";
import * as styledComponentRenderer from "./styledComponent";
import { time } from "./measure";

var buildTemplateData = function buildTemplateData(context, data, renderLevel) {
  var request = context.request;
  return {
    data: data,
    context: {
      request: {
        params: request.params,
        query: request.query,
        pathname: request.pathname,
        host: request.host,
        url: request.url,
        headers: request.headers,
        cookieMap: request.cookieMap
      }
    },
    renderLevel: renderLevel
  };
};

var Entry = /*#__PURE__*/function () {
  function Entry(options) {
    _classCallCheck(this, Entry);

    _defineProperty(this, "entryName", void 0);

    _defineProperty(this, "result", void 0);

    _defineProperty(this, "metrics", void 0);

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "App", void 0);

    _defineProperty(this, "fragments", void 0);

    var ctx = options.ctx;
    var entryName = ctx.entryName,
        templateHTML = ctx.template;
    this.fragments = toFragments(templateHTML);
    this.entryName = entryName;
    this.App = options.App;
    this.metrics = ctx.metrics;
    this.logger = ctx.logger;
    this.result = {
      renderLevel: RenderLevel.CLIENT_RENDER,
      html: '',
      chunksMap: {
        js: '',
        css: ''
      }
    };
  }

  _createClass(Entry, [{
    key: "renderToHtml",
    value: function () {
      var _renderToHtml = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {
        var ssrContext, prefetchData, html, templateData, SSRData, _iterator, _step, fragment, helmetData;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                ssrContext = context.ssrContext;

                if (!ssrContext.redirection.url) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", '');

              case 3:
                _context.next = 5;
                return this.prefetch(context);

              case 5:
                prefetchData = _context.sent;

                if (!ssrContext.redirection.url) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt("return", '');

              case 8:
                if (this.result.renderLevel >= RenderLevel.SERVER_PREFETCH) {
                  this.result.html = this.renderToString(context);
                }

                if (!ssrContext.redirection.url) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", '');

              case 11:
                html = '';
                templateData = buildTemplateData(ssrContext, prefetchData, this.result.renderLevel);
                SSRData = this.getSSRDataScript(templateData);
                _iterator = _createForOfIteratorHelper(this.fragments);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    fragment = _step.value;

                    if (fragment.isVariable && fragment.content === 'SSRDataScript') {
                      html += fragment.getValue(SSRData);
                    } else {
                      html += fragment.getValue(this.result);
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                helmetData = ReactHelmet.renderStatic();
                return _context.abrupt("return", helmetData ? helmetReplace(html, helmetData) : html);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function renderToHtml(_x) {
        return _renderToHtml.apply(this, arguments);
      }

      return renderToHtml;
    }()
  }, {
    key: "prefetch",
    value: function () {
      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {
        var prefetch, prefetchData, end, prefetchCost;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                prefetch = this.App.prefetch;
                end = time();
                _context2.prev = 2;

                if (!prefetch) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 6;
                return prefetch(context);

              case 6:
                _context2.t0 = _context2.sent;
                _context2.next = 10;
                break;

              case 9:
                _context2.t0 = null;

              case 10:
                prefetchData = _context2.t0;
                this.result.renderLevel = RenderLevel.SERVER_PREFETCH;
                prefetchCost = end();
                this.logger.debug("App Prefetch cost = %d ms", prefetchCost);
                this.metrics.emitTimer('app.prefetch.cost', prefetchCost);
                _context2.next = 22;
                break;

              case 17:
                _context2.prev = 17;
                _context2.t1 = _context2["catch"](2);
                this.result.renderLevel = RenderLevel.CLIENT_RENDER;
                this.logger.error('App Prefetch Render', _context2.t1);
                this.metrics.emitCounter('app.prefetch.render.error', 1);

              case 22:
                return _context2.abrupt("return", prefetchData || {});

              case 23:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[2, 17]]);
      }));

      function prefetch(_x2) {
        return _prefetch.apply(this, arguments);
      }

      return prefetch;
    }()
  }, {
    key: "renderToString",
    value: function renderToString(context) {
      var html = '';
      var end = time();
      var ssrContext = context.ssrContext;

      try {
        var App = /*#__PURE__*/React.createElement(this.App, {
          context: Object.assign(context, {
            ssr: true
          })
        }); // Todo render Hook

        var renderContext = {
          loadableManifest: path.resolve(ssrContext.distDir, LOADABLE_STATS_FILE),
          result: this.result,
          entryName: this.entryName
        };
        html = reduce(App, renderContext, [styledComponentRenderer.toHtml, loadableRenderer.toHtml, function (jsx) {
          return ReactDomServer.renderToString(jsx);
        }]);
        var cost = end();
        this.logger.debug('App Render To HTML cost = %d ms', cost);
        this.metrics.emitTimer('app.render.html.cost', cost);
        this.result.renderLevel = RenderLevel.SERVER_RENDER;
      } catch (e) {
        this.logger.error('App Render To HTML', e);
        this.metrics.emitCounter('app.render.html.error', 1);
      }

      return html;
    }
  }, {
    key: "getSSRDataScript",
    value: function getSSRDataScript(templateData) {
      return {
        SSRDataScript: "\n        <script>window._SSR_DATA = ".concat(serialize(templateData, {
          isJSON: true
        }), "</script>\n      ")
      };
    }
  }]);

  return Entry;
}();

export { Entry as default };