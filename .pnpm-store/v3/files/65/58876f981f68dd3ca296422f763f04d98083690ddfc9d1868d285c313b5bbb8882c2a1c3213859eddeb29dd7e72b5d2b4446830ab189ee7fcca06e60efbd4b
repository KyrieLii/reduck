function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createStore as originCreateStore } from '@modern-js-reduck/store';
import effectsPlugin from '@modern-js-reduck/plugin-effects';
import autoActionsPlugin from '@modern-js-reduck/plugin-auto-actions';
import immerPlugin from '@modern-js-reduck/plugin-immutable';
import { MODERNJS_CONFIG_KEY } from "../constant";
export const effects = () => effectsPlugin;
export const immer = () => immerPlugin;
export const autoActions = () => autoActionsPlugin;
export const createStore = props => {
  const createStatePlugins = () => {
    var _modernConfig$runtime;

    const modernConfig = global[MODERNJS_CONFIG_KEY];
    const stateConfig = modernConfig === null || modernConfig === void 0 ? void 0 : (_modernConfig$runtime = modernConfig.runtime) === null || _modernConfig$runtime === void 0 ? void 0 : _modernConfig$runtime.state;
    const plugins = [];

    if ((stateConfig === null || stateConfig === void 0 ? void 0 : stateConfig.effects) !== false) {
      plugins.push(effects());
    }

    if ((stateConfig === null || stateConfig === void 0 ? void 0 : stateConfig.autoActions) !== false) {
      plugins.push(autoActions());
    }

    if ((stateConfig === null || stateConfig === void 0 ? void 0 : stateConfig.immer) !== false) {
      plugins.push(immer());
    }

    return ((props === null || props === void 0 ? void 0 : props.plugins) || []).concat(plugins);
  };

  const config = _objectSpread(_objectSpread({}, props || {}), {}, {
    plugins: createStatePlugins()
  });

  return originCreateStore(config);
};