"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = void 0;

var path = _interopRequireWildcard(require("path"));

var _utils = require("@modern-js/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const tsConfigutils = _utils.Import.lazy('../utils/tsconfig', require);

const valid = _utils.Import.lazy('../utils/valide', require);

const buildFeature = _utils.Import.lazy('../features/build', require);

const build = async (api, {
  watch: _watch = false,
  tsconfig: tsconfigName,
  tsc,
  clear: _clear = true,
  platform
}) => {
  const {
    appDirectory
  } = api.useAppContext();
  const modernConfig = api.useResolvedConfigContext();
  const tsconfigPath = path.join(appDirectory, tsconfigName);

  _utils.dotenv.config();

  const isTsProject = tsConfigutils.existTsConfigFile(tsconfigPath);
  const enableTscCompiler = isTsProject && tsc && !modernConfig.output.disableTsChecker;
  valid.valideBeforeTask({
    modernConfig,
    tsconfigPath
  }); // TODO: 一些配置只需要从modernConfig中获取

  await buildFeature.build(api, {
    appDirectory,
    enableWatchMode: _watch,
    isTsProject,
    platform,
    sourceDir: 'src',
    tsconfigName,
    enableTscCompiler,
    clear: _clear
  }, modernConfig);
  process.on('SIGBREAK', () => {
    console.info('exit');
    const tempTsconfigFilePath = path.join(appDirectory, './tsconfig.temp.json');

    if (_utils.fs.existsSync(tempTsconfigFilePath)) {
      _utils.fs.removeSync(tempTsconfigFilePath);
    }
  });
};

exports.build = build;