"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logTemplate = exports.getDtsMapper = exports.getCodeMapper = exports.getCodeInitMapper = exports.TimeCounter = exports.LogStack = void 0;

var path = _interopRequireWildcard(require("path"));

var os = _interopRequireWildcard(require("os"));

var _utils = require("@modern-js/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const constants = _utils.Import.lazy('./constants', require); // 硬解字符串返回相应格式的对象


const updateMapper = (packageFieldValue, outDir, mapper) => {
  if (packageFieldValue === 'CJS+ES6') {
    return [...mapper, {
      type: 'commonjs',
      syntax: 'es6+',
      outDir
    }];
  } else if (packageFieldValue === 'ESM+ES5') {
    return [...mapper, {
      type: 'module',
      syntax: 'es5',
      outDir
    }];
  } else if (packageFieldValue === 'ESM+ES6') {
    return [...mapper, {
      type: 'module',
      syntax: 'es6+',
      outDir
    }];
  } else {
    return [...mapper];
  }
};

const getCodeInitMapper = (api, _) => {
  const {
    output: {
      packageFields,
      packageMode
    }
  } = api.useResolvedConfigContext();
  let initMapper = []; // 如果不存在packageFields配置或者packageFields为空对象，则使用 packageMode

  if (!packageFields || typeof packageFields === 'object' && Object.keys(packageFields).length === 0) {
    initMapper = constants.PACKAGE_MODES[packageMode || constants.DEFAULT_PACKAGE_MODE];
  } else if (packageFields && Object.keys(packageFields).length > 0) {
    if (packageFields.modern) {
      initMapper = updateMapper(packageFields.modern, 'modern', initMapper);
    }

    if (packageFields.main) {
      initMapper = updateMapper(packageFields.main, 'node', initMapper);
    }

    if (packageFields.module) {
      initMapper = updateMapper(packageFields.module, 'treeshaking', initMapper);
    } // TODO: 如果存在其他配置，需要提示


    if (!packageFields.modern && !packageFields.main && !packageFields.module) {
      console.error(_utils.chalk.red(`Unrecognized ${JSON.stringify(packageFields)} configuration, please use keys: 'modern, main, jupiter:modern' and use values: 'CJS+ES6, ESM+ES5, ESM+ES6'`)); // eslint-disable-next-line no-process-exit

      process.exit(1);
    }
  }

  return initMapper;
}; // 获取执行构建源码的参数


exports.getCodeInitMapper = getCodeInitMapper;

const getCodeMapper = (api, {
  logger,
  taskPath,
  config,
  initMapper,
  srcRootDir,
  willCompilerDirOrFile
}) => {
  const {
    appDirectory
  } = api.useAppContext();
  const modernConfig = api.useResolvedConfigContext();
  const {
    output: {
      enableSourceMap,
      jsPath = 'js',
      path: distDir = 'dist'
    }
  } = modernConfig;
  const {
    tsconfigName = 'tsconfig.json'
  } = config;
  const tsconfigPath = path.join(appDirectory, tsconfigName);
  return initMapper.map(option => {
    var _option$copyDirs;

    // 不是output.copy配置，而是内部的js copy逻辑
    const copyDirs = (_option$copyDirs = option.copyDirs) === null || _option$copyDirs === void 0 ? void 0 : _option$copyDirs.map(copyDir => path.join(appDirectory, `./${distDir}/${jsPath}/${copyDir}`));
    return {
      logger,
      taskPath,
      params: [`--syntax=${option.syntax}`, `--type=${option.type}`, `--srcRootDir=${srcRootDir}`, `--willCompilerDirOrFile=${willCompilerDirOrFile}`, copyDirs ? `--copyDirs=${copyDirs.join(',')}` : '', `--distDir=${path.join(appDirectory, `./${distDir}/${jsPath}/${option.outDir}`)}`, `--appDirectory=${appDirectory}`, enableSourceMap ? '--sourceMaps' : '', `--tsconfigPath=${tsconfigPath}`]
    };
  });
}; // 获取执行生成 d.ts 的参数


exports.getCodeMapper = getCodeMapper;

const getDtsMapper = (api, config, logger) => {
  const {
    appDirectory
  } = api.useAppContext();
  const modernConfig = api.useResolvedConfigContext();
  const {
    output: {
      disableTsChecker,
      path: outputPath = 'dist'
    }
  } = modernConfig;
  const {
    tsconfigName = 'tsconfig.json',
    enableWatchMode,
    sourceDir
  } = config;
  const srcDir = path.join(appDirectory, './src');
  const tsconfigPath = path.join(appDirectory, tsconfigName);
  return [{
    logger,
    taskPath: require.resolve("../../tasks/generator-dts"),
    params: [`--srcDir=${srcDir}`, `--distDir=${path.join(appDirectory, `./${outputPath}/types`)}`, `--appDirectory=${appDirectory}`, `--tsconfigPath=${tsconfigPath}`, `--sourceDirName=${sourceDir}`, enableWatchMode ? `--watch` : '', disableTsChecker ? '' : `--tsCheck`]
  }];
};
/**
 * 处理日志信息
 */


exports.getDtsMapper = getDtsMapper;

class LogStack {
  constructor() {
    _defineProperty(this, "_codeLogStack", void 0);

    this._codeLogStack = [];
  }

  update(latestLog, {
    splitEOL = false
  } = {}) {
    if (splitEOL) {
      latestLog.split(os.EOL).forEach(log => {
        this._codeLogStack.unshift(log.trim());
      });
      return;
    }

    this._codeLogStack.unshift(latestLog.trim());
  }

  clear() {
    this._codeLogStack = [];
  }

  get value() {
    return [...new Set(this._codeLogStack)];
  }

}

exports.LogStack = LogStack;

const logTemplate = (title, messageStack, maxLength, {
  noBottomBorder: _noBottomBorder = false,
  bottomBorderText: _bottomBorderText = '',
  noLeftBorder: _noLeftBorder = false,
  leftBorder: _leftBorder = '│',
  contentColor: _contentColor = s => s
} = {}) => {
  const leftBorderFlag = _noLeftBorder ? '' : _leftBorder;
  const messageFragments = messageStack.map(p => {
    p.trim();
    return `${leftBorderFlag}${p.replace(constants.clearFlag, '')}`;
  }) // 移除 clearFlag
  .slice(0, maxLength) // 控制长度
  .filter(s => s !== leftBorderFlag) // 过滤空字符串
  .reverse(); // 调换顺序，最新的消息在最后面

  const template = `${title}:
${_contentColor(messageFragments.join(os.EOL))}${_noBottomBorder ? '' : `\n${_bottomBorderText}`}`;
  return template;
}; // eslint-disable-next-line @typescript-eslint/no-extraneous-class


exports.logTemplate = logTemplate;

class TimeCounter {
  static time() {
    this._now = Date.now();
  }

  static timeEnd() {
    const span = Date.now() - this._now;

    return span < 1000 ? `${span}ms` : `${(span / 1000).toFixed(2)}s`;
  }

}

exports.TimeCounter = TimeCounter;

_defineProperty(TimeCounter, "_now", void 0);