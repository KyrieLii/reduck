function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { expectType, expectAssignable } from 'tsd';
import { useModel } from '@modern-js/runtime/model';
import { model } from '..';
var counterManual = model('counter').define({
  state: {
    count: 1
  },
  actions: {
    add: function add(state, n) {
      expectType(state);
      return {
        count: state.count + n,
        name: 'a'
      };
    },
    empty: function empty(state) {
      expectType(state);
    },
    test: {
      a: function a(s) {
        return s;
      }
    }
  }
});
var counterInfer = model('counter').define({
  state: {
    count: 1,
    name: 'a'
  },
  actions: {
    add: function add(state, n) {
      expectType(state);
      return {
        count: state.count + n,
        name: 'b'
      };
    },
    empty: function empty(state) {
      expectType(state);
    },
    test: {
      a: function a(state) {
        expectType(state);
        return state;
      }
    }
  }
});
describe('action and state manually type', function () {
  expectType(counterManual.name);
  expectAssignable(counterManual._.actions.add);
  expectType(counterManual._.actions.empty);

  var _useModel = useModel(counterManual),
      _useModel2 = _slicedToArray(_useModel, 2),
      state = _useModel2[0],
      actions = _useModel2[1];

  expectType(state);
  expectType(actions.add);
});
describe('action and state auto infer', function () {
  expectType(counterInfer.name);
  expectType(counterInfer._.actions.add);
  expectType(counterInfer._.actions.empty);

  var _useModel3 = useModel(counterInfer),
      _useModel4 = _slicedToArray(_useModel3, 2),
      state = _useModel4[0],
      actions = _useModel4[1];

  expectType(state);
  expectType(actions.add);
});
describe('action and state union type', function () {
  var _useModel5 = useModel(counterManual),
      _useModel6 = _slicedToArray(_useModel5, 1),
      state = _useModel6[0];

  expectType(state.name);
});
describe('action and state function Initial', function () {
  var counter = model('counter').define(function () {
    return {
      state: {
        c: 1
      },
      actions: {
        add: function add(state, payload) {
          expectType(state.c);
          return {
            c: state.c + payload
          };
        },
        test: {
          a: function a(s) {
            return s;
          },
          b: function b(s, p) {
            return _objectSpread(_objectSpread({}, s), {}, {
              c: s.c + p
            });
          }
        }
      }
    };
  });

  var _useModel7 = useModel(counter),
      _useModel8 = _slicedToArray(_useModel7, 2),
      state = _useModel8[0],
      actions = _useModel8[1];

  expectType(counter._.actions.add);
  expectType(state.c);
  expectType(actions.test.a);
  expectType(actions.test.b);
});