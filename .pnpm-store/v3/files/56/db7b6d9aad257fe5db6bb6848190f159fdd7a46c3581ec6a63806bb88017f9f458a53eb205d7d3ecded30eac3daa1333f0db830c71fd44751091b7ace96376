"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importCheck = exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isStylesDirFile = (appDirectory, currentFilePath, importPath) => {
  if (!currentFilePath) {
    return false;
  }

  const importFileAbsPath = _path.default.join(_path.default.dirname(currentFilePath), importPath);

  const stylesAbsPath = _path.default.resolve(appDirectory, 'styles');

  return importFileAbsPath.includes(stylesAbsPath);
};

const checkIsOutsideSrc = (filename, importName, srcDir) => {
  if (!filename || filename.includes('node_modules/.block-tools/source')) {
    return false;
  }

  const currentFileDir = _path.default.dirname(filename);

  const importFileAbsPath = _path.default.resolve(currentFileDir, importName);

  return _path.default.relative(srcDir, importFileAbsPath).includes('..');
};

const importCheck = () => ({
  name: 'import-check',
  visitor: {
    Program(nodePath, {
      opts,
      file
    }) {
      nodePath.traverse({
        ImportDeclaration(innerPath) {
          const {
            source
          } = innerPath.node;
          const {
            appDirectory
          } = opts;
          const {
            filename
          } = file.opts;
          const srcDir = `${appDirectory}/src`;
          const importName = source !== null && source !== void 0 && source.value ? source.value : undefined;

          if (typeof importName !== 'string') {
            innerPath.skip();
          }

          if (!(0, _utils.isProjectFile)(importName)) {
            innerPath.skip();
          }

          if (isStylesDirFile(appDirectory, filename, importName)) {
            throw new Error(`Importing files in 'styles' directory is not allowed: '${importName}', You can place the file in the 'src' directory or remove the imported code`);
          }

          if (checkIsOutsideSrc(filename, importName, srcDir)) {
            throw new Error(`Importing files outside of 'src' directory is not allowed: '${importName}, You can place the file in the 'src' directory and modify the imported code'`);
          }
        }

      });
    }

  }
});

exports.importCheck = importCheck;
var _default = importCheck;
exports.default = _default;