"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonorepoNewAction = void 0;

var _lodash = require("@modern-js/utils/lodash");

var _codesmith = require("@modern-js/codesmith");

var _generatorCommon = require("@modern-js/generator-common");

var _generatorUtils = require("@modern-js/generator-utils");

var _utils = require("./utils");

const REPO_GENERATOR = '@modern-js/repo-generator';

const MonorepoNewAction = async options => {
  const {
    locale = 'zh',
    distTag = '',
    debug = false,
    registry = '',
    config = '{}',
    plugins = [],
    cwd = process.cwd()
  } = options;
  let UserConfig = {};

  try {
    UserConfig = JSON.parse(config);
  } catch (e) {
    throw new Error('config is not a valid json');
  }

  _generatorCommon.i18n.changeLanguage({
    locale: UserConfig.locale || locale
  });

  const smith = new _codesmith.CodeSmith({
    debug,
    registryUrl: registry
  });

  if (!(0, _utils.alreadyRepo)(cwd)) {
    smith.logger.warn('not valid modern.js repo');
  }

  const finalConfig = (0, _lodash.merge)(UserConfig, {
    locale: UserConfig.locale || locale,
    packageManager: UserConfig.packageManager || (await (0, _generatorUtils.getPackageManager)(cwd)),
    isMonorepo: true,
    distTag,
    plugins
  });
  let generator = REPO_GENERATOR;

  if (process.env.CODESMITH_ENV === 'development') {
    generator = require.resolve(generator);
  } else if (distTag) {
    generator = `${generator}@${distTag}`;
  }

  const task = [{
    name: generator,
    config: finalConfig
  }];
  await smith.forge({
    tasks: task.map(runner => ({
      generator: runner.name,
      config: runner.config
    })),
    pwd: cwd
  });
};

exports.MonorepoNewAction = MonorepoNewAction;