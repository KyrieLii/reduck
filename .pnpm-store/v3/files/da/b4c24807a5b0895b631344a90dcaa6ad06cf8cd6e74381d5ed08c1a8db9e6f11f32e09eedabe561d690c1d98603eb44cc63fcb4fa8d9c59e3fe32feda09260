import path from 'path';
import { fs, globby } from '@modern-js/utils';
import { AllHttpMethods, APIMode, FRAMEWORK_MODE_LAMBDA_DIR } from "./constant";
export const createExistChecker = base => target => fs.pathExistsSync(path.resolve(base, target));
export const getAPIMode = apiDir => {
  const exist = createExistChecker(apiDir);

  if (exist(FRAMEWORK_MODE_LAMBDA_DIR)) {
    return APIMode.FARMEWORK;
  }

  return APIMode.FUNCTION;
};
export const isAllowedHttpMethod = method => AllHttpMethods.includes(method.toUpperCase());
const API_FILE_RULES = ['**/*.[tj]s', '!**/_*', '!**/_*/**/*.[tj]s', '!**/*.test.js', '!**/*.test.ts', '!**/*.d.ts', '!__test__/*.ts', '!__tests__/*.ts', '!node_modules/**', '!bootstrap.js'];
export const getAllAPIFiles = lambdaDir => getAllFiles(lambdaDir, API_FILE_RULES);
export const getAllFiles = (lambdaDir, rules) => globby.sync(rules, {
  cwd: lambdaDir,
  gitignore: true
}).map(file => path.resolve(lambdaDir, file));
export const getLambdaDir = apiDir => {
  const mode = getAPIMode(apiDir);
  const lambdaDir = mode === APIMode.FARMEWORK ? path.join(apiDir, FRAMEWORK_MODE_LAMBDA_DIR) : apiDir;
  return lambdaDir;
};
export const requireModule = modulePath => {
  const requiredModule = require(modulePath);

  if (requiredModule.__esModule && requiredModule.default) {
    return requiredModule.default;
  }

  return requiredModule;
};