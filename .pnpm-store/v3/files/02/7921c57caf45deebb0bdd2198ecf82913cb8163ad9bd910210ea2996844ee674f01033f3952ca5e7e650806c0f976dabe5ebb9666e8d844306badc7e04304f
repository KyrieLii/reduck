"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Fragment = void 0;
exports.toFragments = toFragments;

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const readFile = filepath => {
  if (_fs.default.existsSync(filepath)) {
    return _fs.default.readFileSync(filepath, 'utf-8');
  } else {
    return null;
  }
};

const VARIABLE_REG_EXP = /<!--<\?([-=+])\s*(.*?)\s*\?>-->/;
const VARIABLE_SPLITTER = /(<!--<\?.*?\?>-->)/;
const ENCODE_HTML_RULES = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&#34;',
  "'": '&#39;'
};
const MATCH_HTML = /[&<>'"]/g;

function encodeChar(c) {
  return ENCODE_HTML_RULES[c] || c;
}

function escape(str) {
  return str.replace(MATCH_HTML, encodeChar);
}

class Fragment {
  constructor(template) {
    _defineProperty(this, "isVariable", void 0);

    _defineProperty(this, "content", void 0);

    _defineProperty(this, "filters", void 0);

    _defineProperty(this, "path", void 0);

    const match = VARIABLE_REG_EXP.exec(template);

    if (match) {
      const [, filterFlag, content] = match;
      this.isVariable = true;
      this.content = content;
      this.filters = [Fragment.filterMap[filterFlag]];
      this.path = content.replace(/\[['"](.*?)['"]\]/g, '.$1').split('.');
    } else {
      this.isVariable = false;
      this.content = template;
      this.filters = [];
      this.path = [];
    }
  }

  getValue(data) {
    if (this.isVariable) {
      const value = this.path.reduce((p, n) => p != null ? p[n] : p, data);
      return this.filters.reduce((p, n) => n(p), value != null ? value : '');
    }

    return this.content;
  }

}

exports.Fragment = Fragment;

_defineProperty(Fragment, "filterMap", {
  '=': escape,
  '-': v => v
});

const fragmentListMap = {};

function toFragments(filename) {
  if (fragmentListMap[filename]) {
    return fragmentListMap[filename];
  } // 未开启现代构建的项目无 -es6.html


  const template = readFile(filename);

  if (!template) {
    throw new Error(`Could not find template file: ${filename}`);
  }

  const fragmentList = template.split(VARIABLE_SPLITTER).filter(v => Boolean(v)).map(v => new Fragment(v));
  fragmentListMap[filename] = fragmentList;
  return fragmentList;
}