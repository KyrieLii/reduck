function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as path from 'path';
import { PackageJsonLookup } from '@rushstack/node-core-library';
import { globby } from '@modern-js/utils';
import pMap from 'p-map';
import { errorLog } from "../log/error";
import { Package } from "../package";

const normalize = results => results.map(fp => path.normalize(fp));

const getGlobOpts = (rootPath, packageConfigs, ignore = []) => {
  const globOpts = {
    cwd: rootPath,
    absolute: true,
    expandDirectories: false,
    followSymbolicLinks: false
  };

  if (packageConfigs.some(cfg => cfg.includes('**'))) {
    if (packageConfigs.some(cfg => cfg.includes('node_modules'))) {
      errorLog('An explicit node_modules package path does not allow globstars (**)');
    }

    globOpts.ignore = [// allow globs like "packages/**",
    // but avoid picking up node_modules/**/package.json and dist/**/package.json
    '**/dist/**', '**/node_modules/**', ...(ignore || [])];
  }

  return globOpts;
};

const makeFileFinder = (rootPath, packageConfigs, ignoreConfigs = []) => {
  const globOpts = getGlobOpts(rootPath, packageConfigs, ignoreConfigs);
  return async (fileName, fileMapper, customGlobOpts = {}) => {
    const options = _objectSpread(_objectSpread({}, customGlobOpts), globOpts);

    const promise = pMap(Array.from(packageConfigs).sort(), async globPath => {
      let result = await globby(path.posix.join(globPath, fileName), options); // fast-glob does not respect pattern order, so we re-sort by absolute path

      result = result.sort(); // POSIX results always need to be normalized

      result = normalize(result);
      return fileMapper(result);
    }, {
      concurrency: packageConfigs.length || Infinity
    }); // always flatten the results

    const results = await promise;
    return results.reduce((acc, result) => acc.concat(result), []);
  };
};

export const getProjectsByPackageConfig = async (rootPath, packagesConfig, ignoreConfigs) => {
  const finder = makeFileFinder(rootPath, packagesConfig, ignoreConfigs);
  const fileName = 'package.json';

  const mapper = packageConfigPath => {
    const packageJsonLookup = new PackageJsonLookup({
      loadExtraFields: true
    });
    const packageJson = packageJsonLookup.loadNodePackageJson(packageConfigPath);
    return new Package(packageJson, path.dirname(packageConfigPath), rootPath);
  };

  const projects = await finder(fileName, filePaths => pMap(filePaths, mapper, {
    concurrency: filePaths.length || Infinity
  }), {});
  return projects;
};

const makeSyncFileFinder = (rootPath, packageConfigs, ignoreConfigs = []) => {
  const globOpts = getGlobOpts(rootPath, packageConfigs, ignoreConfigs);
  return (fileName, fileMapper, customGlobOpts = {}) => {
    const results = [];

    const options = _objectSpread(_objectSpread({}, customGlobOpts), globOpts);

    for (const globPath of Array.from(packageConfigs).sort()) {
      let result = globby.sync(path.posix.join(globPath, fileName), options); // fast-glob does not respect pattern order, so we re-sort by absolute path

      result = result.sort(); // POSIX results always need to be normalized

      result = normalize(result);
      results.push(fileMapper(result));
    }

    return results.reduce((acc, result) => acc.concat(result), []);
  };
};

export const syncGetProjectsByPackageConfig = (rootPath, packagesConfig, ignoreConfigs) => {
  const finder = makeSyncFileFinder(rootPath, packagesConfig, ignoreConfigs);
  const fileName = 'package.json';

  const mapper = packageConfigPath => {
    const packageJsonLookup = new PackageJsonLookup({
      loadExtraFields: true
    });
    const packageJson = packageJsonLookup.loadNodePackageJson(packageConfigPath);
    return new Package(packageJson, path.dirname(packageConfigPath), rootPath);
  };

  const projects = finder(fileName, filePaths => filePaths.map(filePath => mapper(filePath)), {});
  return projects;
};