function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export const createBabelPlainChain = () => {
  let config = {};
  const plain = {
    // delete operator
    delete: key => {
      delete config[key];
    },
    // field setter
    cwd: input => {
      config.cwd = input;
    },
    caller: input => {
      config.caller = input;
    },
    filename: input => {
      config.filename = input;
    },
    filenameRelative: input => {
      config.filenameRelative = input;
    },
    code: input => {
      config.code = input;
    },
    ast: input => {
      config.ast = input;
    },
    root: input => {
      config.root = input;
    },
    rootMode: input => {
      config.rootMode = input;
    },
    envName: input => {
      config.envName = input;
    },
    configFile: input => {
      config.configFile = input;
    },
    babelrc: input => {
      config.babelrc = input;
    },
    babelrcRoots: input => {
      config.babelrcRoots = input;
    },
    extends: input => {
      config.extends = input;
    },
    env: input => {
      config.env = input;
    },
    overrides: input => {
      config.overrides = input;
    },
    test: input => {
      config.test = input;
    },
    include: input => {
      config.include = input;
    },
    exclude: input => {
      config.exclude = input;
    },
    ignore: input => {
      config.ignore = input;
    },
    only: input => {
      config.only = input;
    },
    inputSourceMap: input => {
      config.inputSourceMap = input;
    },
    sourceMaps: input => {
      config.sourceMaps = input;
    },
    sourceFileName: input => {
      config.sourceFileName = input;
    },
    sourceRoot: input => {
      config.sourceRoot = input;
    },
    sourceType: input => {
      config.sourceType = input;
    },
    highlightCode: input => {
      config.highlightCode = input;
    },
    wrapPluginVisitorMethod: input => {
      config.wrapPluginVisitorMethod = input;
    },
    parserOpts: input => {
      config.parserOpts = input;
    },
    generatorOpts: input => {
      config.generatorOpts = input;
    },
    retainLines: input => {
      config.retainLines = input;
    },
    compact: input => {
      config.compact = input;
    },
    minified: input => {
      config.minified = input;
    },
    auxiliaryCommentBefore: input => {
      config.auxiliaryCommentBefore = input;
    },
    auxiliaryCommentAfter: input => {
      config.auxiliaryCommentAfter = input;
    },
    comments: input => {
      config.comments = input;
    },
    shouldPrintComment: input => {
      config.shouldPrintComment = input;
    },
    moduleIds: input => {
      config.moduleIds = input;
    },
    moduleId: input => {
      config.moduleId = input;
    },
    getModuleId: input => {
      config.getModuleId = input;
    },
    moduleRoot: input => {
      config.moduleRoot = input;
    }
  };

  const toJSON = () => _objectSpread({}, config); // straightforward merging babel config
  // see https://babeljs.io/docs/en/configuration#how-babel-merges-config-items


  const merge = other => {
    const otherConfig = other.toJSON();

    const nexConfig = _objectSpread(_objectSpread({}, config), otherConfig);

    if (nexConfig.parserOpts) {
      nexConfig.parserOpts = _objectSpread(_objectSpread({}, config.parserOpts), otherConfig.parserOpts);
    }

    if (nexConfig.generatorOpts) {
      nexConfig.generatorOpts = _objectSpread(_objectSpread({}, config.generatorOpts), otherConfig.generatorOpts);
    }

    config = nexConfig;
    return chain;
  };

  const chain = {
    plain,
    toJSON,
    merge
  };
  return chain;
};