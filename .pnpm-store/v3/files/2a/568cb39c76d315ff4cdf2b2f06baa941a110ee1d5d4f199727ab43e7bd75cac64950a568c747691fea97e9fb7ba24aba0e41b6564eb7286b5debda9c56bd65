declare const ContextSymbol: unique symbol;
export declare type Context<T = any> = {
  id: symbol;
  [ContextSymbol]: T;
  create: (value: T) => Context<T>;
  use: () => {
    value: T;
  };
  get: () => T;
  set: (value: T) => void;
};
export declare const createContext: <T>(value: T) => Context<T>;
export declare type ContextStorage = {
  [key: string]: Context;
};
export declare type Container = {
  read: <V>(Context: Context<V>) => V;
  write: <V>(Context: Context<V>, value: V) => void;
};
export declare const createContainer: (ContextStorage?: ContextStorage) => Container;
export declare type Hooks = {
  useContainer: () => Container;
};
export declare const runHooks: <F extends import("./asyncHooksInterface").AnyFn>(f: F, implementations: Hooks) => ReturnType<F>;
export declare const useContainer: () => Container;
export declare const fromContainer: (container: Container) => Hooks;
export declare const runWithContainer: <F extends (...args: any) => any>(f: F, container: Container) => ReturnType<F>;
export {};