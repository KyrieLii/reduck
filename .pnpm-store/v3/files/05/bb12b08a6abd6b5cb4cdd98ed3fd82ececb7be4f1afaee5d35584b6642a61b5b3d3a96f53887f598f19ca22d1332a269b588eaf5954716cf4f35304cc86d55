"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getBabelConfig: true,
  getModuleBabelChain: true,
  getFinalBabelConfig: true,
  getBabelUtils: true
};
exports.getBabelConfig = void 0;
Object.defineProperty(exports, "getBabelUtils", {
  enumerable: true,
  get: function () {
    return _babelPresetLib.getBabelUtils;
  }
});
exports.getModuleBabelChain = exports.getFinalBabelConfig = void 0;

var _babelPresetLib = require("@modern-js/babel-preset-lib");

var _builtIn = require("./built-in");

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getBabelConfig = (modulePresetOption, syntaxOption) => {
  const chain = getModuleBabelChain(modulePresetOption, syntaxOption);
  return _objectSpread({
    sourceType: 'unambiguous'
  }, chain.toJSON());
};

exports.getBabelConfig = getBabelConfig;

const getModuleBabelChain = (modulePresetOption, syntaxOption) => {
  const {
    appDirectory
  } = modulePresetOption;
  const chain = (0, _babelPresetLib.getBabelChain)(modulePresetOption, syntaxOption); // link: https://github.com/tc39/proposal-do-expressions

  chain.plugin('@babel/plugin-proposal-do-expressions').use(require.resolve('@babel/plugin-proposal-do-expressions')); // link: https://github.com/tc39/proposal-throw-expressions

  chain.plugin('@babel/plugin-proposal-throw-expressions').use(require.resolve('@babel/plugin-proposal-throw-expressions')); // https://github.com/tc39/proposal-class-static-block

  chain.plugin('@babel/plugin-proposal-class-static-block').use(require.resolve('@babel/plugin-proposal-class-static-block')); // link:
  // https://github.com/tc39/proposal-function.sent

  chain.plugin('@babel/plugin-proposal-function-sent').use(require.resolve('@babel/plugin-proposal-function-sent')); // link:
  // https://github.com/tc39/proposal-logical-assignment

  chain.plugin('@babel/plugin-proposal-logical-assignment-operators').use(require.resolve('@babel/plugin-proposal-logical-assignment-operators'));
  const buildInPlugins = (0, _builtIn.getBuildInPlugins)({
    appDirectory,
    importStyle: modulePresetOption.importStyle
  });
  chain.merge(buildInPlugins);
  return chain;
};

exports.getModuleBabelChain = getModuleBabelChain;

const getFinalBabelConfig = chain => _objectSpread({
  sourceType: 'unambiguous'
}, chain.toJSON());

exports.getFinalBabelConfig = getFinalBabelConfig;