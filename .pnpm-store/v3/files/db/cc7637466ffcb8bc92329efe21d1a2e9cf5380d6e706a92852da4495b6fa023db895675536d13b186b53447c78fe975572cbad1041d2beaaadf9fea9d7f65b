"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildSourceCode = void 0;

var path = _interopRequireWildcard(require("path"));

var os = _interopRequireWildcard(require("os"));

var _utils = require("@modern-js/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const pMap = _utils.Import.lazy('p-map', require);

const utils = _utils.Import.lazy('./utils', require);

const lg = _utils.Import.lazy('./logger', require);

const constants = _utils.Import.lazy('./constants', require);

const buildSourceCode = async (api, config, _) => {
  const {
    sourceDir,
    enableTscCompiler
  } = config;
  const {
    appDirectory
  } = api.useAppContext();
  const concurrency = os.cpus().length;
  const srcRootDir = path.join(appDirectory, sourceDir);
  const lm = new lg.LoggerManager();
  const codeLog = lm.createLoggerText({
    title: constants.runBabelCompilerTitle
  });
  const dtsLog = lm.createLoggerText({
    title: constants.runTscTitle
  });
  const styleLog = lm.createLoggerText({
    title: constants.runStyleCompilerTitle
  });
  const copyLog = lm.createLoggerText({
    title: 'Copy Log:'
  });
  const initCodeMapper = utils.getCodeInitMapper(api, config);
  const taskMapper = [...utils.getCodeMapper(api, {
    logger: codeLog,
    taskPath: require.resolve("../../tasks/build-source-code"),
    config,
    willCompilerDirOrFile: sourceDir,
    initMapper: initCodeMapper,
    srcRootDir
  }), ...(enableTscCompiler ? utils.getDtsMapper(api, config, dtsLog) : []), {
    logger: styleLog,
    taskPath: require.resolve("../../tasks/build-style")
  }, {
    logger: copyLog,
    taskPath: require.resolve("../../tasks/copy-assets")
  }];
  lm.showCompiling();
  await pMap(taskMapper, async ({
    logger,
    taskPath,
    params
  }) => {
    const childProcess = _utils.execa.node(taskPath, params, {
      stdio: 'pipe'
    });

    if (logger === codeLog || logger === copyLog) {
      lm.addStdout(logger, childProcess.stdout, {
        event: {
          data: true,
          error: true
        }
      });
      lm.addStderr(logger, childProcess.stderr);
    }

    if (logger === dtsLog) {
      lm.addStdout(dtsLog, childProcess.stdout, {
        event: {
          data: true,
          error: true
        }
      });
      lm.addStderr(dtsLog, childProcess.stderr);
    }

    if (logger === styleLog) {
      lm.addStdout(logger, childProcess.stdout, {
        event: {
          data: true,
          error: true
        }
      });
      lm.addStderr(logger, childProcess.stderr);
    }

    await childProcess;
  }, {
    concurrency
  });
  lm.disappearCompiling();
  enableTscCompiler && console.info(dtsLog.value);
  console.info(codeLog.value);

  if (styleLog.hasMessages()) {
    console.info(styleLog.value);
  }

  if (copyLog.hasMessages()) {
    console.info(copyLog.value);
  }

  if (dtsLog.hasErrorMessage || codeLog.hasErrorMessage || styleLog.hasErrorMessage || copyLog.hasErrorMessage) {
    // eslint-disable-next-line no-process-exit
    process.exit(1);
  }
};

exports.buildSourceCode = buildSourceCode;