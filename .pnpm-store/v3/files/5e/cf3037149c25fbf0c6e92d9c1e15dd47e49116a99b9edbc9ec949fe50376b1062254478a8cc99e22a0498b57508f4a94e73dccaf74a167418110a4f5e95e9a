import { RUN_MODE } from "../constants";
import { ModernServer } from "./modern-server";

class ModernSSRServer extends ModernServer {
  prepareAPIHandler(_m, _) {
    return null;
  }

  filterRoutes(routes) {
    return routes.filter(route => route.isSSR);
  }

  async setupBeforeProdMiddleware() {
    if (this.runMode === RUN_MODE.FULL) {
      await super.setupBeforeProdMiddleware();
    }
  }

  async emitRouteHook(_, _input) {
    if (this.runMode === RUN_MODE.FULL) {
      await super.emitRouteHook(_, _input);
    }
  }

}

class ModernAPIServer extends ModernServer {
  prepareWebHandler(_) {
    return null;
  }

  filterRoutes(routes) {
    return routes.filter(route => route.isApi);
  }

  async setupBeforeProdMiddleware() {
    if (this.runMode === RUN_MODE.FULL) {
      await super.setupBeforeProdMiddleware();
    }
  }

  async emitRouteHook(_, _input) {// empty
  }

}

class ModernWebServer extends ModernServer {
  async warmupSSRBundle() {
    return null;
  }

  async handleAPI(context) {
    const {
      proxyTarget
    } = this;

    if (proxyTarget !== null && proxyTarget !== void 0 && proxyTarget.api) {
      return this.proxy();
    } else {
      return this.render404(context);
    }
  }

  async handleWeb(context, route) {
    const {
      proxyTarget
    } = this;

    if (route.isSSR && proxyTarget !== null && proxyTarget !== void 0 && proxyTarget.ssr) {
      return this.proxy();
    } else {
      // if no proxyTarget but access web server, degradation to csr
      route.isSSR = false;
      return super.handleWeb(context, route);
    }
  }

}

export const createProdServer = options => {
  if (options.apiOnly) {
    return new ModernAPIServer(options);
  } else if (options.ssrOnly) {
    return new ModernSSRServer(options);
  } else if (options.webOnly) {
    return new ModernWebServer(options);
  } else {
    return new ModernServer(options);
  }
};