"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeLockFile = exports.installByPackageManager = void 0;

var path = _interopRequireWildcard(require("path"));

var _utils = require("@modern-js/utils");

var _constants = require("../constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const removeLockFile = (rootPath, packageManager) => {
  if (packageManager === 'pnpm') {
    _utils.fs.removeSync(path.join(rootPath, _constants.LOCK_FILE.PNPM));
  } else if (packageManager === 'yarn') {
    _utils.fs.removeSync(path.join(rootPath, _constants.LOCK_FILE.YARN));
  } else if (packageManager === 'npm') {
    _utils.fs.removeSync(path.join(rootPath, _constants.LOCK_FILE.NPM));
  }
};

exports.removeLockFile = removeLockFile;

const installByPackageManager = async (packageManager, {
  rootPath,
  removeLock
}) => {
  if (removeLock) {
    removeLockFile(rootPath, packageManager);
  }

  if (packageManager === 'pnpm') {
    await (0, _utils.execa)('pnpm', ['install'], {
      stdio: 'inherit'
    });
  }

  if (packageManager === 'yarn') {
    await (0, _utils.execa)('yarn', ['install'], {
      stdio: 'inherit'
    });
  }
};

exports.installByPackageManager = installByPackageManager;