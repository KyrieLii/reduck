"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dev = void 0;

var path = _interopRequireWildcard(require("path"));

var _utils = require("@modern-js/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const devFeature = _utils.Import.lazy('../features/dev', require);

const tsConfigutils = _utils.Import.lazy('../utils/tsconfig', require);

const valid = _utils.Import.lazy('../utils/valide', require);

const existSubCmd = subCmd => subCmd.length > 0;

const dev = async (api, option, subCmd = '') => {
  const {
    tsconfig: tsconfigName
  } = option;
  const appContext = api.useAppContext();
  const modernConfig = api.useResolvedConfigContext();
  const {
    appDirectory
  } = appContext;
  const tsconfigPath = path.join(appDirectory, tsconfigName);

  _utils.dotenv.config();

  valid.valideBeforeTask({
    modernConfig,
    tsconfigPath
  });
  const isTsProject = tsConfigutils.existTsConfigFile(tsconfigPath);

  if (existSubCmd(subCmd)) {
    await devFeature.runSubCmd(api, subCmd, {
      isTsProject,
      appDirectory
    });
    return;
  } // Compatible with the use of jupiter, RUN_PLATFORM is used in jupiter


  if (process.env.RUN_PLATFORM) {
    await devFeature.showMenu(api, {
      isTsProject,
      appDirectory
    });
  } else {
    await devFeature.devStorybook(api, {
      isTsProject,
      appDirectory
    });
  }
};

exports.dev = dev;