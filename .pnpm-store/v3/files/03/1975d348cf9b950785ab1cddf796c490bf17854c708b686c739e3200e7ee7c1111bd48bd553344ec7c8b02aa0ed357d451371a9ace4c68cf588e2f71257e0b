function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { model, createStore } from '..';
const countModel = model('counter').define({
  state: {
    value: 1
  },
  actions: {
    add(state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        value: state.value + 1
      });
    }

  }
});
const store = createStore();
describe('test model', () => {
  test('model can be used by store', () => {
    store.use(countModel);
    expect(store.getState()).toEqual({
      counter: {
        value: 1
      }
    });
  });
  test('model(name) will return a new model', () => {
    store.use(countModel('counter1'));
    expect(store.getState()).toEqual({
      counter: {
        value: 1
      },
      counter1: {
        value: 1
      }
    });
    store.use(countModel('counter1'))[1].add();
    expect(store.getState()).toEqual({
      counter: {
        value: 1
      },
      counter1: {
        value: 2
      }
    });
  });
  test(`someModel('a') and someModel('a') should return same reference model`, () => {
    expect(countModel('1')).toBe(countModel('1'));
  });
});