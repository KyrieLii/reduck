"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAsyncWaterfall = exports.getAsyncBrook = exports.createAsyncWaterfall = void 0;

var _farrowPipeline = require("../farrow-pipeline");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ASYNC_WATERFALL_SYMBOL = Symbol.for('MODERN_ASYNC_WATERFALL');

const getAsyncBrook = input => {
  if (typeof input === 'function') {
    return input;
  } else if (input && typeof input.middleware === 'function') {
    return input.middleware;
  }

  throw new Error(`${input} is not a AsyncBrook or { brook: AsyncBrook }`);
};

exports.getAsyncBrook = getAsyncBrook;

const createAsyncWaterfall = () => {
  const pipeline = (0, _farrowPipeline.createAsyncPipeline)();

  const use = (...input) => {
    pipeline.use(...input.map(getAsyncBrook).map(mapAsyncBrookToAsyncMiddleware));
    return waterfall;
  };

  const run = (input, options) => pipeline.run(input, _objectSpread(_objectSpread({}, options), {}, {
    onLast: input => input
  }));

  const middleware = input => {
    const container = (0, _farrowPipeline.useContainer)();
    return pipeline.run(input, {
      container,
      onLast: input => input
    });
  };

  const waterfall = _objectSpread(_objectSpread({}, pipeline), {}, {
    use,
    run,
    middleware,
    [ASYNC_WATERFALL_SYMBOL]: true
  });

  return waterfall;
};

exports.createAsyncWaterfall = createAsyncWaterfall;

const isAsyncWaterfall = input => Boolean(input === null || input === void 0 ? void 0 : input[ASYNC_WATERFALL_SYMBOL]);

exports.isAsyncWaterfall = isAsyncWaterfall;

const mapAsyncBrookToAsyncMiddleware = brook => async (input, next) => next(await brook(input));