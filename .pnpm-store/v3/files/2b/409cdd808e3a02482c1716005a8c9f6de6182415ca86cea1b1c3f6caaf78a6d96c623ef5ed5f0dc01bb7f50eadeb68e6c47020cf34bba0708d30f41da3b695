"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _store = require("@modern-js-reduck/store");

var _reduxPromiseMiddleware = require("redux-promise-middleware");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Generare dispatch action from effects definations.
 */
const createDispatchActionsFromEffects = (store, name, effects, setDispatchAction) => {
  const path = [name];

  const traverse = _effects => {
    if (typeof _effects === 'function') {
      const type = path.join('/').toUpperCase();
      setDispatchAction(path.slice(), (...args) => {
        const value = _effects(...args);

        const dispatch = payload => store.dispatch({
          type,
          payload
        }); // Handled by promise middleware or redux thunk
        // Otherwise, do not dispatch action, just exec the effect fuction.


        if (value instanceof Promise || typeof value === 'function') {
          return dispatch(value);
        }

        return null;
      });
    } else {
      Object.keys(_effects).forEach(key => {
        path.push(key);
        traverse(_effects[key]);
        path.pop();
      });
    }
  };

  traverse(effects);
};

const plugin = (0, _store.createPlugin)(context => ({
  config(storeConfig) {
    return _objectSpread(_objectSpread({}, storeConfig), {}, {
      middlewares: [...(storeConfig.middlewares || []), (0, _reduxPromiseMiddleware.createPromise)({
        promiseTypeDelimiter: '/'
      }), _reduxThunk.default]
    });
  },

  modelMount({
    modelDesc,
    mountedModel
  }, {
    setDispatchAction
  }) {
    const {
      effects
    } = modelDesc;

    if (!effects) {
      return {
        modelDesc,
        mountedModel
      };
    }

    createDispatchActionsFromEffects(context.store, modelDesc.name, modelDesc.effects, setDispatchAction);
    return {
      modelDesc,
      mountedModel
    };
  }

}));
var _default = plugin;
exports.default = _default;