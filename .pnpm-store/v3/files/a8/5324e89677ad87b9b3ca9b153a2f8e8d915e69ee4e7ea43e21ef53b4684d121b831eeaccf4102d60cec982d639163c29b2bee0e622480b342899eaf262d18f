import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import fs from 'fs';

var readFile = function readFile(filepath) {
  if (fs.existsSync(filepath)) {
    return fs.readFileSync(filepath, 'utf-8');
  } else {
    return null;
  }
};

var VARIABLE_REG_EXP = /<!--<\?([-=+])\s*(.*?)\s*\?>-->/;
var VARIABLE_SPLITTER = /(<!--<\?.*?\?>-->)/;
var ENCODE_HTML_RULES = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&#34;',
  "'": '&#39;'
};
var MATCH_HTML = /[&<>'"]/g;

function encodeChar(c) {
  return ENCODE_HTML_RULES[c] || c;
}

function escape(str) {
  return str.replace(MATCH_HTML, encodeChar);
}

export var Fragment = /*#__PURE__*/function () {
  function Fragment(template) {
    _classCallCheck(this, Fragment);

    _defineProperty(this, "isVariable", void 0);

    _defineProperty(this, "content", void 0);

    _defineProperty(this, "filters", void 0);

    _defineProperty(this, "path", void 0);

    var match = VARIABLE_REG_EXP.exec(template);

    if (match) {
      var _match = _slicedToArray(match, 3),
          filterFlag = _match[1],
          content = _match[2];

      this.isVariable = true;
      this.content = content;
      this.filters = [Fragment.filterMap[filterFlag]];
      this.path = content.replace(/\[['"](.*?)['"]\]/g, '.$1').split('.');
    } else {
      this.isVariable = false;
      this.content = template;
      this.filters = [];
      this.path = [];
    }
  }

  _createClass(Fragment, [{
    key: "getValue",
    value: function getValue(data) {
      if (this.isVariable) {
        var value = this.path.reduce(function (p, n) {
          return p != null ? p[n] : p;
        }, data);
        return this.filters.reduce(function (p, n) {
          return n(p);
        }, value != null ? value : '');
      }

      return this.content;
    }
  }]);

  return Fragment;
}();

_defineProperty(Fragment, "filterMap", {
  '=': escape,
  '-': function _(v) {
    return v;
  }
});

var fragmentListMap = {};
export function toFragments(filename) {
  if (fragmentListMap[filename]) {
    return fragmentListMap[filename];
  } // 未开启现代构建的项目无 -es6.html


  var template = readFile(filename);

  if (!template) {
    throw new Error("Could not find template file: ".concat(filename));
  }

  var fragmentList = template.split(VARIABLE_SPLITTER).filter(function (v) {
    return Boolean(v);
  }).map(function (v) {
    return new Fragment(v);
  });
  fragmentListMap[filename] = fragmentList;
  return fragmentList;
}